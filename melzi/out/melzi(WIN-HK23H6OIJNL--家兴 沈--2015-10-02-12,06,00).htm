<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\melzi.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\melzi.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Fri Oct 02 12:05:47 2015
<BR><P>
<H3>Maximum Stack Usage =        664 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
gcodeTsk() &rArr; c_gcode::loop() &rArr; c_gcode::G29() &rArr; c_gcode::G29_Liner(float, float, float, float*, float*) &rArr; c_gcode::G29_Detect(float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[373]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[18]">__exc_nmi</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">__exc_nmi</a><BR>
 <LI><a href="#[19]">__exc_hardfault</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">__exc_hardfault</a><BR>
 <LI><a href="#[1a]">__exc_memmanage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">__exc_memmanage</a><BR>
 <LI><a href="#[1b]">__exc_busfault</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">__exc_busfault</a><BR>
 <LI><a href="#[1c]">__exc_usagefault</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">__exc_usagefault</a><BR>
 <LI><a href="#[1d]">__stm32reservedexception7</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">__stm32reservedexception7</a><BR>
 <LI><a href="#[1e]">__stm32reservedexception8</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">__stm32reservedexception8</a><BR>
 <LI><a href="#[1f]">__stm32reservedexception9</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">__stm32reservedexception9</a><BR>
 <LI><a href="#[20]">__stm32reservedexception10</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">__stm32reservedexception10</a><BR>
 <LI><a href="#[22]">__exc_debug_monitor</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">__exc_debug_monitor</a><BR>
 <LI><a href="#[23]">__stm32reservedexception13</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">__stm32reservedexception13</a><BR>
 <LI><a href="#[38]">__irq_adc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">__irq_adc</a><BR>
 <LI><a href="#[62]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">rt_alloc_box</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[85]">BusSpeed</a> from spi_stm32f103.o(.text) referenced from spi_stm32f103.o(.constdata)
 <LI><a href="#[87]">CheckMedia</a> from spi_stm32f103.o(.text) referenced from spi_stm32f103.o(.constdata)
 <LI><a href="#[80]">Init</a> from spi_stm32f103.o(.text) referenced from spi_stm32f103.o(.constdata)
 <LI><a href="#[90]">NOP_Process</a> from usb_core.o(.text) referenced 27 times from m_usbserial.o(.constdata)
 <LI><a href="#[24]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[84]">RecBuf</a> from spi_stm32f103.o(.text) referenced from spi_stm32f103.o(.constdata)
 <LI><a href="#[21]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[82]">Send</a> from spi_stm32f103.o(.text) referenced from spi_stm32f103.o(.constdata)
 <LI><a href="#[83]">SendBuf</a> from spi_stm32f103.o(.text) referenced from spi_stm32f103.o(.constdata)
 <LI><a href="#[86]">SetSS</a> from spi_stm32f103.o(.text) referenced from spi_stm32f103.o(.constdata)
 <LI><a href="#[11e]">Standard_GetConfiguration</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[11f]">Standard_GetInterface</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[11d]">Standard_GetStatus</a> from usb_core.o(.text) referenced 3 times from usb_core.o(.text)
 <LI><a href="#[25]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[81]">UnInit</a> from spi_stm32f103.o(.text) referenced from spi_stm32f103.o(.constdata)
 <LI><a href="#[8e]">InitUsbVcom()</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[9b]">SOF_UsbVcom()</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[8f]">ResetUsbVcom()</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[278]">mainLoopTask()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[d]">max1LimitIsr()</a> from stepmoto.o(.text) referenced 2 times from stepmoto.o(.data)
 <LI><a href="#[e]">max2LimitIsr()</a> from stepmoto.o(.text) referenced 2 times from stepmoto.o(.data)
 <LI><a href="#[f]">max3LimitIsr()</a> from stepmoto.o(.text) referenced 2 times from stepmoto.o(.data)
 <LI><a href="#[10]">max4LimitIsr()</a> from stepmoto.o(.text) referenced 2 times from stepmoto.o(.data)
 <LI><a href="#[11]">max5LimitIsr()</a> from stepmoto.o(.text) referenced 2 times from stepmoto.o(.data)
 <LI><a href="#[12]">min1LimitIsr()</a> from stepmoto.o(.text) referenced 2 times from stepmoto.o(.data)
 <LI><a href="#[13]">min2LimitIsr()</a> from stepmoto.o(.text) referenced 2 times from stepmoto.o(.data)
 <LI><a href="#[14]">min3LimitIsr()</a> from stepmoto.o(.text) referenced 2 times from stepmoto.o(.data)
 <LI><a href="#[15]">min4LimitIsr()</a> from stepmoto.o(.text) referenced 2 times from stepmoto.o(.data)
 <LI><a href="#[16]">min5LimitIsr()</a> from stepmoto.o(.text) referenced 2 times from stepmoto.o(.data)
 <LI><a href="#[6e]">sdReaderTask()</a> from sdreader.o(.text) referenced from main.o(.text)
 <LI><a href="#[258]">serialEpInit()</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.text)
 <LI><a href="#[9c]">RESET_UsbVcom()</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[99]">EP1_IN_Callback_UsbVcom()</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[9a]">EP3_OUT_Callback_UsbVcom()</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[b]">u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)</a> from u8glib_st7920_128x64_rrd.o(.text) referenced 2 times from u8glib_st7920_128x64_rrd.o(.data)
 <LI><a href="#[6c]">lcdTask()</a> from lcd.o(.text) referenced from main.o(.text)
 <LI><a href="#[da]">premain()</a> from m_mapleinit.o(.text) referenced from m_mapleinit.o(.init_array)
 <LI><a href="#[74]">stepIsr()</a> from stepmoto.o(.text) referenced from stepmoto.o(.text)
 <LI><a href="#[6f]">commuTsk()</a> from commu.o(.text) referenced from main.o(.text)
 <LI><a href="#[70]">gcodeTsk()</a> from gcode.o(.text) referenced from main.o(.text)
 <LI><a href="#[69]">voidFunc()</a> from m_sysconf.o(.text) referenced from m_usbserial.o(.text)
 <LI><a href="#[281]">init_task()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[cb]">Print::write(const char*)</a> from m_print.o(.text) referenced from m_print.o(.constdata__ZTV5Print)
 <LI><a href="#[cb]">Print::write(const char*)</a> from m_print.o(.text) referenced from m_serial.o(.constdata__ZTV6serial)
 <LI><a href="#[cc]">Print::write(const void*, unsigned)</a> from m_print.o(.text) referenced from m_print.o(.constdata__ZTV5Print)
 <LI><a href="#[cc]">Print::write(const void*, unsigned)</a> from m_print.o(.text) referenced from m_serial.o(.constdata__ZTV6serial)
 <LI><a href="#[b4]">c_lcd::adjust_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[b5]">c_lcd::motion_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[bc]">c_lcd::status_menu()</a> from lcd.o(.text) referenced 2 times from lcd.o(.constdata)
 <LI><a href="#[b2]">c_lcd::control_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[b0]">c_lcd::prepare_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[b6]">c_lcd::printer_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[b7]">c_lcd::retract_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[b1]">c_lcd::function_move()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[a8]">c_lcd::function_Focus()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[a0]">c_lcd::menu_edit_int3()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[ae]">c_lcd::move_menu_load()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[a6]">c_lcd::menu_edit_long5()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[c5]">c_lcd::preheatAbs_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[c4]">c_lcd::preheatPla_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[c3]">c_lcd::sys_status_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[a1]">c_lcd::menu_edit_float3()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[a3]">c_lcd::menu_edit_float5()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[b3]">c_lcd::temperature_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[c6]">c_lcd::function_autoTurn()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[c1]">c_lcd::function_cardMenu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[ad]">c_lcd::function_cooldown()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[c2]">c_lcd::function_initCard()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[bb]">c_lcd::function_openfile()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[a2]">c_lcd::menu_edit_float32()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[a4]">c_lcd::menu_edit_float51()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[a5]">c_lcd::menu_edit_float52()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[b9]">c_lcd::function_loadEprom()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[c0]">c_lcd::function_stopPrint()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[be]">c_lcd::function_pausePrint()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[ac]">c_lcd::function_preheatAbs()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[ab]">c_lcd::function_preheatPla()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[c7]">c_lcd::function_reCalDelta()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[b8]">c_lcd::function_storeEprom()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[a9]">c_lcd::function_autoStartSd()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[bf]">c_lcd::function_resumePrint()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[aa]">c_lcd::function_setZzeroPos()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[9e]">c_lcd::menu_immediataly_move1()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[9d]">c_lcd::menu_immediataly_move01()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[9f]">c_lcd::menu_immediataly_move10()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[ba]">c_lcd::function_reStoreFailsafe()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[a7]">c_lcd::main_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[af]">c_lcd::move_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[bd]">c_lcd::tune_menu()</a> from lcd.o(.text) referenced from lcd.o(.constdata)
 <LI><a href="#[91]">c_usb::Class_Data_Setup(unsigned char)</a> from m_usb.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[256]">c_usb::getSetLineCoding(unsigned short)</a> from m_usb.o(.text) referenced from m_usb.o(.text)
 <LI><a href="#[92]">c_usb::Class_NoData_Setup(unsigned char)</a> from m_usb.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[95]">c_usb::GetConfigDescriptor(unsigned short)</a> from m_usb.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[94]">c_usb::GetDeviceDescriptor(unsigned short)</a> from m_usb.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[96]">c_usb::GetStringDescriptor(unsigned short)</a> from m_usb.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[97]">c_usb::User_SetConfiguration()</a> from m_usb.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[98]">c_usb::User_SetDeviceAddress()</a> from m_usb.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[93]">c_usb::Class_Get_Interface_Setting(unsigned char, unsigned char)</a> from m_usb.o(.text) referenced from m_usbserial.o(.constdata)
 <LI><a href="#[c9]">U8GLIB::write(const char*)</a> from u8glib_st7920_128x64_rrd.o(i._ZN6U8GLIB5writeEPKc) referenced from u8glib_st7920_128x64_rrd.o(.constdata__ZTV24U8GLIB_ST7920_128X64_RRD)
 <LI><a href="#[c9]">U8GLIB::write(const char*)</a> from u8glib_st7920_128x64_rrd.o(i._ZN6U8GLIB5writeEPKc) referenced from u8glib_st7920_128x64_rrd.o(.constdata__ZTV6U8GLIB)
 <LI><a href="#[c8]">U8GLIB::write(unsigned char)</a> from u8glib_st7920_128x64_rrd.o(i._ZN6U8GLIB5writeEh) referenced from u8glib_st7920_128x64_rrd.o(.constdata__ZTV24U8GLIB_ST7920_128X64_RRD)
 <LI><a href="#[c8]">U8GLIB::write(unsigned char)</a> from u8glib_st7920_128x64_rrd.o(i._ZN6U8GLIB5writeEh) referenced from u8glib_st7920_128x64_rrd.o(.constdata__ZTV6U8GLIB)
 <LI><a href="#[ce]">serial::write(unsigned char*)</a> from m_serial.o(.text) referenced from m_serial.o(.constdata__ZTV6serial)
 <LI><a href="#[cd]">serial::write(unsigned char)</a> from m_serial.o(.text) referenced from m_serial.o(.constdata__ZTV6serial)
 <LI><a href="#[d0]">usbSerial::write(const char*)</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.constdata__ZTV9usbSerial)
 <LI><a href="#[d1]">usbSerial::write(const void*, unsigned)</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.constdata__ZTV9usbSerial)
 <LI><a href="#[cf]">usbSerial::write(unsigned char)</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.constdata__ZTV9usbSerial)
 <LI><a href="#[ca]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from m_print.o(.constdata__ZTV5Print)
 <LI><a href="#[1b]">__exc_busfault</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">__exc_debug_monitor</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">__exc_hardfault</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">__exc_memmanage</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">__exc_nmi</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">__exc_reset</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">__exc_usagefault</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">__irq_adc</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">__irq_adc3</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">__irq_can1_rx1</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">__irq_can1_sce</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">__irq_dma1_channel1</a> from m_adc.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">__irq_dma1_channel2</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">__irq_dma1_channel3</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">__irq_dma1_channel4</a> from m_serial.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">__irq_dma1_channel5</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">__irq_dma1_channel6</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">__irq_dma1_channel7</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">__irq_dma2_channel1</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">__irq_dma2_channel2</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">__irq_dma2_channel3</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">__irq_dma2_channel4_5</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">__irq_exti0</a> from m_exti.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">__irq_exti1</a> from m_exti.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">__irq_exti15_10</a> from m_exti.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">__irq_exti2</a> from m_exti.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">__irq_exti3</a> from m_exti.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">__irq_exti4</a> from m_exti.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">__irq_exti9_5</a> from m_exti.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">__irq_flash</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">__irq_fsmc</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">__irq_i2c1_er</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">__irq_i2c1_ev</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__irq_i2c2_er</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">__irq_i2c2_ev</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">__irq_pvd</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">__irq_rcc</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">__irq_rtc</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">__irq_rtc_alarm</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">__irq_sdio</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">__irq_spi1</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">__irq_spi2</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">__irq_spi3</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">__irq_tamper</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">__irq_tim1_brk</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">__irq_tim1_cc</a> from m_timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">__irq_tim1_trg_com</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">__irq_tim1_up</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">__irq_tim2</a> from m_timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">__irq_tim3</a> from m_timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">__irq_tim4</a> from m_timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">__irq_tim5</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">__irq_tim6</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">__irq_tim7</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">__irq_tim8_brk</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">__irq_tim8_cc</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">__irq_tim8_trg_com</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">__irq_tim8_up</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">__irq_usart1</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">__irq_usart2</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">__irq_usart3</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">__irq_usart4</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">__irq_usart5</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">__irq_usb_hp_can_tx</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">__irq_usb_lp_can_rx0</a> from m_usb.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">__irq_usbwakeup</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">__irq_wwdg</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[df]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[d4]">__sti___10_m_gpio_cpp</a> from m_gpio.o(.text) referenced from m_gpio.o(.init_array)
 <LI><a href="#[d5]">__sti___11_m_timer_cpp</a> from m_timer.o(.text) referenced from m_timer.o(.init_array)
 <LI><a href="#[d7]">__sti___12_m_serial_cpp</a> from m_serial.o(.text) referenced from m_serial.o(.init_array)
 <LI><a href="#[db]">__sti___12_stepMoto_cpp</a> from stepmoto.o(.text) referenced from stepmoto.o(.init_array)
 <LI><a href="#[d9]">__sti___15_m_usbSerial_cpp</a> from m_usbserial.o(.text) referenced from m_usbserial.o(.init_array)
 <LI><a href="#[dc]">__sti___15_temperature_cpp</a> from temperature.o(.text) referenced from temperature.o(.init_array)
 <LI><a href="#[d2]">__sti___28_U8GLIB_ST7920_128X64_RRD_cpp</a> from u8glib_st7920_128x64_rrd.o(.text) referenced from u8glib_st7920_128x64_rrd.o(.init_array)
 <LI><a href="#[dd]">__sti___9_Gcode_cpp</a> from gcode.o(.text) referenced from gcode.o(.init_array)
 <LI><a href="#[de]">__sti___9_commu_cpp</a> from commu.o(.text) referenced from commu.o(.init_array)
 <LI><a href="#[d3]">__sti___9_m_adc_cpp</a> from m_adc.o(.text) referenced from m_adc.o(.init_array)
 <LI><a href="#[d6]">__sti___9_m_rcc_cpp</a> from m_rcc.o(.text) referenced from m_rcc.o(.init_array)
 <LI><a href="#[d8]">__sti___9_m_usb_cpp</a> from m_usb.o(.text) referenced from m_usb.o(.init_array)
 <LI><a href="#[20]">__stm32reservedexception10</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">__stm32reservedexception13</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">__stm32reservedexception7</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">__stm32reservedexception8</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">__stm32reservedexception9</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[7d]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[7c]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[30a]">encoderPulse1Isr</a> from lcd.o(.text) referenced from lcd.o(.text)
 <LI><a href="#[309]">encoderPulse2Isr</a> from lcd.o(.text) referenced from lcd.o(.text)
 <LI><a href="#[7e]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[8d]">mc0_DevCtrl</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[88]">mc0_Init</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[8c]">mc0_RdInfo</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[8a]">mc0_RdSect</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[89]">mc0_UnInit</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[8b]">mc0_WrSect</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[7f]">os_idle_demon</a> from main.o(.text) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[62]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[67]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced 13 times from m_gpio.o(.text)
 <LI><a href="#[63]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[79]">rt_mbx_init</a> from rt_mailbox.o(i.rt_mbx_init) referenced from commu.o(.text)
 <LI><a href="#[77]">rt_mbx_send</a> from rt_mailbox.o(i.rt_mbx_send) referenced from commu.o(.text)
 <LI><a href="#[7a]">rt_mbx_wait</a> from rt_mailbox.o(i.rt_mbx_wait) referenced from commu.o(.text)
 <LI><a href="#[78]">rt_mut_init</a> from rt_mutex.o(i.rt_mut_init) referenced from commu.o(.text)
 <LI><a href="#[76]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced 3 times from gcode.o(.text)
 <LI><a href="#[75]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced 3 times from gcode.o(.text)
 <LI><a href="#[6a]">rt_sem_init</a> from rt_semaphore.o(i.rt_sem_init) referenced 3 times from m_usbserial.o(.text)
 <LI><a href="#[6b]">rt_sem_send</a> from rt_semaphore.o(i.rt_sem_send) referenced from main.o(.text)
 <LI><a href="#[6b]">rt_sem_send</a> from rt_semaphore.o(i.rt_sem_send) referenced from lcd.o(i._ZN5c_lcd20menu_action_feedBackEv)
 <LI><a href="#[73]">rt_sem_wait</a> from rt_semaphore.o(i.rt_sem_wait) referenced 3 times from stepmoto.o(.text)
 <LI><a href="#[72]">rt_sys_init</a> from rt_task.o(i.rt_sys_init) referenced from main.o(.text)
 <LI><a href="#[68]">rt_time_get</a> from rt_time.o(i.rt_time_get) referenced 10 times from m_gpio.o(.text)
 <LI><a href="#[6d]">rt_tsk_create</a> from rt_task.o(i.rt_tsk_create) referenced 2 times from main.o(.text)
 <LI><a href="#[71]">rt_tsk_delete</a> from rt_task.o(i.rt_tsk_delete) referenced from main.o(.text)
 <LI><a href="#[c]">u8g_com_null_fn</a> from u8g_com_null.o(.text) referenced 2 times from u8glib_st7920_128x64_rrd.o(.data)
 <LI><a href="#[16a]">u8g_font_calc_vref_bottom</a> from u8g_font.o(.text) referenced from u8g_font.o(.text)
 <LI><a href="#[16c]">u8g_font_calc_vref_center</a> from u8g_font.o(.text) referenced from u8g_font.o(.text)
 <LI><a href="#[169]">u8g_font_calc_vref_font</a> from u8g_font.o(.text) referenced from u8g_font.o(.text)
 <LI><a href="#[16b]">u8g_font_calc_vref_top</a> from u8g_font.o(.text) referenced from u8g_font.o(.text)
 <LI><a href="#[16e]">u8g_font_get_char</a> from u8g_font.o(.text) referenced from u8g_font.o(.text)
 <LI><a href="#[170]">u8g_font_get_charP</a> from u8g_font.o(.text) referenced from u8g_font.o(.text)
 <LI><a href="#[66]">u8g_state_dummy_cb</a> from u8g_state.o(.text) referenced from u8g_ll_api.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[df]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ea]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[467]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[468]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[469]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[46a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[46b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[fa]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[46c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[46d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[46e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[46f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[470]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[471]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[472]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[473]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[474]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[475]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[476]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[477]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[478]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[479]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000022))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[47a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[47b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[47c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[47d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[47e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[47f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[f5]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[480]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[481]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[482]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[483]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[484]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[485]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[e9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[486]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[f7]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f9]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[487]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[fb]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; serial::begin(unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[488]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[380]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[fe]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[489]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[100]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[438]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[43d]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[287]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33d]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commuTsk()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calloc_box
</UL>

<P><STRONG><a name="[33e]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::getGcodeLock(ts_commu_buf*)
</UL>

<P><STRONG><a name="[21]"></a>SVC_Handler</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PendSV_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
</UL>

<P><STRONG><a name="[48a]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[64]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[48b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>__exc_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>__exc_nmi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_nmi
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_nmi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>__exc_hardfault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_hardfault
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_hardfault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>__exc_memmanage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_memmanage
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_memmanage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>__exc_busfault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_busfault
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_busfault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>__exc_usagefault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_usagefault
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_usagefault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>__stm32reservedexception7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stm32reservedexception7
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stm32reservedexception7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>__stm32reservedexception8</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stm32reservedexception8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stm32reservedexception8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>__stm32reservedexception9</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stm32reservedexception9
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stm32reservedexception9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>__stm32reservedexception10</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stm32reservedexception10
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stm32reservedexception10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>__exc_debug_monitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_debug_monitor
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exc_debug_monitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>__stm32reservedexception13</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stm32reservedexception13
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stm32reservedexception13
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>__irq_adc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_adc
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_adc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>__irq_adc3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>__irq_can1_rx1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>__irq_can1_sce</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>__irq_dma1_channel2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>__irq_dma1_channel3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>__irq_dma1_channel5</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>__irq_dma1_channel6</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>__irq_dma1_channel7</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>__irq_dma2_channel1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>__irq_dma2_channel2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>__irq_dma2_channel3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>__irq_dma2_channel4_5</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>__irq_flash</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>__irq_fsmc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>__irq_i2c1_er</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>__irq_i2c1_ev</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>__irq_i2c2_er</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>__irq_i2c2_ev</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>__irq_pvd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>__irq_rcc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>__irq_rtc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>__irq_rtc_alarm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>__irq_sdio</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>__irq_spi1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>__irq_spi2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>__irq_spi3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>__irq_tamper</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>__irq_tim1_brk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>__irq_tim1_trg_com</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>__irq_tim1_up</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>__irq_tim5</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>__irq_tim6</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>__irq_tim7</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>__irq_tim8_brk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>__irq_tim8_cc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>__irq_tim8_trg_com</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>__irq_tim8_up</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>__irq_usart1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>__irq_usart2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>__irq_usart3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>__irq_usart4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>__irq_usart5</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>__irq_usb_hp_can_tx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>__irq_usbwakeup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>__irq_wwdg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[373]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[48c]"></a>USB_SIL_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_sil.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>USB_SIL_Write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>

<P><STRONG><a name="[10d]"></a>USB_SIL_Read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Read &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback_UsbVcom()
</UL>

<P><STRONG><a name="[11e]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[11f]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[11d]"></a>Standard_GetStatus</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>Standard_ClearFeature</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[11c]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[11a]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[257]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::GetStringDescriptor(unsigned short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::GetConfigDescriptor(unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::GetDeviceDescriptor(unsigned short)
</UL>

<P><STRONG><a name="[121]"></a>Post0_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[122]"></a>Setup0_Process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[125]"></a>SetDeviceAddress</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::ResetPort(void(*)())
</UL>

<P><STRONG><a name="[124]"></a>In0_Process</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[126]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[90]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[250]"></a>USB_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::beging(usblib_dev*)
</UL>

<P><STRONG><a name="[127]"></a>CTR_LP</STRONG> (Thumb, 584 bytes, Stack size 8 bytes, usb_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::USB_Istr()
</UL>

<P><STRONG><a name="[48d]"></a>CTR_HP</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, usb_int.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>UserToPMABufferCopy</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, usb_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::Handle_USBAsynchXfer()
</UL>

<P><STRONG><a name="[110]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usb_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[48e]"></a>SetCNTR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[48f]"></a>GetCNTR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>SetISTR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[491]"></a>GetISTR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[492]"></a>GetFNR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[493]"></a>SetDADDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>GetDADDR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>SetBTABLE</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::ResetPort(void(*)())
</UL>

<P><STRONG><a name="[495]"></a>GetBTABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[496]"></a>SetENDPOINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>GetENDPOINT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDouBleBuffEPStall
</UL>

<P><STRONG><a name="[259]"></a>SetEPType</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEpInit()
</UL>

<P><STRONG><a name="[497]"></a>GetEPType</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>SetEPTxStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEpInit()
</UL>

<P><STRONG><a name="[25d]"></a>SetEPRxStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEpInit()
</UL>

<P><STRONG><a name="[128]"></a>SetDouBleBuffEPStall</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_regs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetENDPOINT
</UL>

<P><STRONG><a name="[498]"></a>GetEPTxStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[499]"></a>GetEPRxStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>SetEPTxValid</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::Handle_USBAsynchXfer()
</UL>

<P><STRONG><a name="[264]"></a>SetEPRxValid</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback_UsbVcom()
</UL>

<P><STRONG><a name="[49a]"></a>SetEP_KIND</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[49b]"></a>ClearEP_KIND</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>Clear_Status_Out</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEpInit()
</UL>

<P><STRONG><a name="[49c]"></a>Set_Status_Out</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[49d]"></a>SetEPDoubleBuff</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[49e]"></a>ClearEPDoubleBuff</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[49f]"></a>GetTxStallStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4a0]"></a>GetRxStallStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4a1]"></a>ClearEP_CTR_RX</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4a2]"></a>ClearEP_CTR_TX</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4a3]"></a>ToggleDTOG_RX</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4a4]"></a>ToggleDTOG_TX</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>ClearDTOG_RX</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[112]"></a>ClearDTOG_TX</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[4a5]"></a>SetEPAddress</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4a6]"></a>GetEPAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>SetEPTxAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEpInit()
</UL>

<P><STRONG><a name="[25a]"></a>SetEPRxAddr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEpInit()
</UL>

<P><STRONG><a name="[10a]"></a>GetEPTxAddr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
</UL>

<P><STRONG><a name="[10f]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[10c]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::Handle_USBAsynchXfer()
</UL>

<P><STRONG><a name="[4a7]"></a>SetEPCountRxReg</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>SetEPRxCount</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usb_regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEpInit()
</UL>

<P><STRONG><a name="[4a8]"></a>GetEPTxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>GetEPRxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[4a9]"></a>SetEPDblBuffAddr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4aa]"></a>SetEPDblBuf0Addr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4ab]"></a>SetEPDblBuf1Addr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4ac]"></a>GetEPDblBuf0Addr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4ad]"></a>GetEPDblBuf1Addr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4ae]"></a>SetEPDblBuffCount</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4af]"></a>SetEPDblBuf0Count</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4b0]"></a>SetEPDblBuf1Count</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4b1]"></a>GetEPDblBuf0Count</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4b2]"></a>GetEPDblBuf1Count</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4b3]"></a>GetEPDblBufDir</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>FreeUserBuffer</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>ToWord</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[150]"></a>u8g_IsBBXIntersection</STRONG> (Thumb, 182 bytes, Stack size 28 bytes, u8g_clip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = u8g_IsBBXIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph270
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph90
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawRBox
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawRFrame
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBox
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawVLine
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHLine
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawXBMP
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawXBM
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBitmapP
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBitmap
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawDisc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawCircle
</UL>

<P><STRONG><a name="[4b6]"></a>u8g_InitCom</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_com_api.o(.text), UNUSED)

<P><STRONG><a name="[4b7]"></a>u8g_StopCom</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_com_api.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>u8g_SetChipSelect</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[12e]"></a>u8g_SetResetLow</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_com_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[130]"></a>u8g_SetResetHigh</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_com_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[12c]"></a>u8g_SetAddress</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[12b]"></a>u8g_WriteByte</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[1ae]"></a>u8g_WriteSequence</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, u8g_com_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_WriteBuffer
</UL>

<P><STRONG><a name="[4b8]"></a>u8g_WriteSequenceP</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, u8g_com_api.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>u8g_WriteEscSeqP</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, u8g_com_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Delay
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteByte
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetAddress
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetResetHigh
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetResetLow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetChipSelect
</UL>

<P><STRONG><a name="[c]"></a>u8g_com_null_fn</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, u8g_com_null.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = u8g_com_null_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8glib_st7920_128x64_rrd.o(.data)
</UL>
<P><STRONG><a name="[138]"></a>u8g_font_GetCapitalAHeight</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetCapitalAHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrAMinBox
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontCapitalAHeight
</UL>

<P><STRONG><a name="[139]"></a>u8g_font_GetEncoding65Pos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetEncoding65Pos
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_word
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[13b]"></a>u8g_font_GetEncoding97Pos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetEncoding97Pos
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_word
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[13c]"></a>u8g_font_GetFontStartEncoding</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontStartEncoding
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetSize
</UL>

<P><STRONG><a name="[13d]"></a>u8g_font_GetFontEndEncoding</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontEndEncoding
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetSize
</UL>

<P><STRONG><a name="[13e]"></a>u8g_font_GetLowerGDescent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetLowerGDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[13f]"></a>u8g_font_GetFontAscent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontAscent
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[140]"></a>u8g_font_GetFontDescent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[141]"></a>u8g_font_GetFontXAscent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontXAscent
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[142]"></a>u8g_font_GetFontXDescent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[144]"></a>u8g_font_GetSize</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontEndEncoding
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontStartEncoding
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontGlyphStructureSize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>

<P><STRONG><a name="[145]"></a>u8g_GetFontBBXWidth</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetBBXWidth
</UL>

<P><STRONG><a name="[146]"></a>u8g_GetFontBBXHeight</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetBBXHeight
</UL>

<P><STRONG><a name="[147]"></a>u8g_GetFontBBXOffX</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetBBXOffX
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyphFontBBX
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrFontBBX
</UL>

<P><STRONG><a name="[148]"></a>u8g_GetFontBBXOffY</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetBBXOffY
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyphFontBBX
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrFontBBX
</UL>

<P><STRONG><a name="[149]"></a>u8g_GetFontCapitalAHeight</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetCapitalAHeight
</UL>

<P><STRONG><a name="[14b]"></a>u8g_GetGlyph</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = u8g_GetGlyph &rArr; u8g_CopyGlyphDataToCache &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontEndEncoding
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontStartEncoding
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding97Pos
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding65Pos
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FillEmptyGlyphCache
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_CopyGlyphDataToCache
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontGlyphStructureSize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrWidthP
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrWidth
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrXP
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrX
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_calc_str_pixel_width
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph270
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph90
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyphDeltaX
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsGlyph
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_str_box_fill_args
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_calc_str_min_box
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>

<P><STRONG><a name="[14d]"></a>u8g_IsGlyph</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[14e]"></a>u8g_GetGlyphDeltaX</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[14f]"></a>u8g_draw_glyph</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetGlyphDataStart
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyphFontBBX
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrP
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyph
</UL>

<P><STRONG><a name="[152]"></a>u8g_DrawGlyph</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = u8g_DrawGlyph &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::write(unsigned char)
</UL>

<P><STRONG><a name="[153]"></a>u8g_draw_glyph90</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetGlyphDataStart
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr90
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyph90
</UL>

<P><STRONG><a name="[154]"></a>u8g_DrawGlyph90</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph90
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr90P
</UL>

<P><STRONG><a name="[155]"></a>u8g_draw_glyph180</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetGlyphDataStart
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr180
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyph180
</UL>

<P><STRONG><a name="[156]"></a>u8g_DrawGlyph180</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr180P
</UL>

<P><STRONG><a name="[157]"></a>u8g_draw_glyph270</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetGlyphDataStart
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr270
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyph270
</UL>

<P><STRONG><a name="[158]"></a>u8g_DrawGlyph270</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph270
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr270P
</UL>

<P><STRONG><a name="[159]"></a>u8g_DrawStr</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = u8g_DrawStr &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrDir
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawStr(unsigned char, unsigned char, const char*)
</UL>

<P><STRONG><a name="[15a]"></a>u8g_DrawStr90</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph90
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrDir
</UL>

<P><STRONG><a name="[15b]"></a>u8g_DrawStr180</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrDir
</UL>

<P><STRONG><a name="[15c]"></a>u8g_DrawStr270</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph270
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrDir
</UL>

<P><STRONG><a name="[15d]"></a>u8g_DrawStrDir</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr270
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr180
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr90
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrFontBBX
</UL>

<P><STRONG><a name="[15e]"></a>u8g_DrawStrP</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>

<P><STRONG><a name="[15f]"></a>u8g_DrawStr90P</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyph90
</UL>

<P><STRONG><a name="[160]"></a>u8g_DrawStr180P</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyph180
</UL>

<P><STRONG><a name="[161]"></a>u8g_DrawStr270P</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyph270
</UL>

<P><STRONG><a name="[162]"></a>u8g_DrawStrFontBBX</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrDir
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontBBXOffY
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontBBXOffX
</UL>

<P><STRONG><a name="[163]"></a>u8g_DrawGlyphFontBBX</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontBBXOffY
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontBBXOffX
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>

<P><STRONG><a name="[164]"></a>u8g_UpdateRefHeight</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXDescent
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXAscent
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontDescent
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontAscent
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetLowerGDescent
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetCapitalAHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontLineSpacingFactor
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontRefHeightAll
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontRefHeightExtendedText
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontRefHeightText
</UL>

<P><STRONG><a name="[165]"></a>u8g_SetFontRefHeightText</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[166]"></a>u8g_SetFontRefHeightExtendedText</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[167]"></a>u8g_SetFontRefHeightAll</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[168]"></a>u8g_SetFontLineSpacingFactor</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[169]"></a>u8g_font_calc_vref_font</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(.text)
</UL>
<P><STRONG><a name="[17c]"></a>u8g_SetFontPosBaseline</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g_font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>

<P><STRONG><a name="[16a]"></a>u8g_font_calc_vref_bottom</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g_font.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(.text)
</UL>
<P><STRONG><a name="[4b9]"></a>u8g_SetFontPosBottom</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g_font.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>u8g_font_calc_vref_top</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8g_font.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(.text)
</UL>
<P><STRONG><a name="[4ba]"></a>u8g_SetFontPosTop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g_font.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>u8g_font_calc_vref_center</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, u8g_font.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(.text)
</UL>
<P><STRONG><a name="[4bb]"></a>u8g_SetFontPosCenter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g_font.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>u8g_font_get_char</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>u8g_font_get_charP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>u8g_font_calc_str_pixel_width</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrPixelWidthP
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrPixelWidth
</UL>

<P><STRONG><a name="[16f]"></a>u8g_GetStrPixelWidth</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_calc_str_pixel_width
</UL>

<P><STRONG><a name="[171]"></a>u8g_GetStrPixelWidthP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_calc_str_pixel_width
</UL>

<P><STRONG><a name="[172]"></a>u8g_GetStrX</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[173]"></a>u8g_GetStrXP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[174]"></a>u8g_GetStrWidth</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[175]"></a>u8g_GetStrWidthP</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[177]"></a>u8g_font_box_min</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_calc_str_min_box
</UL>

<P><STRONG><a name="[4bc]"></a>u8g_font_box_left_gA</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, u8g_font.o(.text), UNUSED)

<P><STRONG><a name="[4bd]"></a>u8g_font_box_all_gA</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, u8g_font.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>u8g_GetStrMinBox</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_str_box_fill_args
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_calc_str_min_box
</UL>

<P><STRONG><a name="[17a]"></a>u8g_GetStrAMinBox</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetCapitalAHeight
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_str_box_fill_args
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_calc_str_min_box
</UL>

<P><STRONG><a name="[17b]"></a>u8g_SetFont</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontPosBaseline
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setFont(const unsigned char*)
</UL>

<P><STRONG><a name="[17e]"></a>u8g_call_dev_fn</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SleepOff
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SleepOn
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetModeLL
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetHeightLL
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetWidthLL
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8PixelLL
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixelLL
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetContrastLL
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPageLL
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPageLL
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitLL
</UL>

<P><STRONG><a name="[17d]"></a>u8g_InitLL</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_InitLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
</UL>

<P><STRONG><a name="[17f]"></a>u8g_FirstPageLL</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_FirstPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPage
</UL>

<P><STRONG><a name="[180]"></a>u8g_NextPageLL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_NextPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPage
</UL>

<P><STRONG><a name="[181]"></a>u8g_SetContrastLL</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetContrast
</UL>

<P><STRONG><a name="[182]"></a>u8g_DrawPixelLL</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_DrawPixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixel
</UL>

<P><STRONG><a name="[183]"></a>u8g_Draw8PixelLL</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>

<P><STRONG><a name="[184]"></a>u8g_GetWidthLL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[185]"></a>u8g_GetHeightLL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetHeightLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[186]"></a>u8g_GetModeLL</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetModeLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[187]"></a>u8g_UpdateDimension</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_UpdateDimension &rArr; u8g_GetModeLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetModeLL
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetHeightLL
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetWidthLL
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
</UL>

<P><STRONG><a name="[189]"></a>u8g_SetColorIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_ll_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetDefaultMidColor
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetDefaultBackgroundColor
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetDefaultForegroundColor
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setColorIndex(unsigned char)
</UL>

<P><STRONG><a name="[18a]"></a>u8g_Begin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetModeLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitLL
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitRW8Bit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Init8Bit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Init8BitFixedPort
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitI2C
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitHWSPI
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitSPI
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::firstPage()
</UL>

<P><STRONG><a name="[18b]"></a>u8g_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = u8g_Init &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetModeLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB_ST7920_128X64_RRD::U8GLIB_ST7920_128X64_RRD(unsigned char)
</UL>

<P><STRONG><a name="[18c]"></a>u8g_InitSPI</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>

<P><STRONG><a name="[18d]"></a>u8g_InitHWSPI</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>

<P><STRONG><a name="[18e]"></a>u8g_InitI2C</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>

<P><STRONG><a name="[18f]"></a>u8g_Init8BitFixedPort</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>

<P><STRONG><a name="[190]"></a>u8g_Init8Bit</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>

<P><STRONG><a name="[191]"></a>u8g_InitRW8Bit</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>

<P><STRONG><a name="[192]"></a>u8g_FirstPage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_FirstPage &rArr; u8g_FirstPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPageLL
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::firstPage()
</UL>

<P><STRONG><a name="[193]"></a>u8g_NextPage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_NextPage &rArr; u8g_NextPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPageLL
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::nextPage()
</UL>

<P><STRONG><a name="[194]"></a>u8g_SetContrast</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetContrastLL
</UL>

<P><STRONG><a name="[195]"></a>u8g_SleepOn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>

<P><STRONG><a name="[196]"></a>u8g_SleepOff</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>

<P><STRONG><a name="[197]"></a>u8g_DrawPixel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = u8g_DrawPixel &rArr; u8g_DrawPixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixelLL
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHXBMP
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHXBM
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_circle_section
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawPixel(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[151]"></a>u8g_Draw8Pixel</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8PixelLL
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph270
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph90
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_vline
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_hline
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHBitmapP
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHBitmap
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHXBMP
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHXBM
</UL>

<P><STRONG><a name="[4be]"></a>u8g_GetColorIndex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g_ll_api.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>u8g_GetDefaultForegroundColor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetDefaultForegroundColor
</UL>

<P><STRONG><a name="[198]"></a>u8g_SetDefaultForegroundColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetColorIndex
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetDefaultForegroundColor
</UL>

<P><STRONG><a name="[19b]"></a>u8g_GetDefaultBackgroundColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetDefaultBackgroundColor
</UL>

<P><STRONG><a name="[19a]"></a>u8g_SetDefaultBackgroundColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetColorIndex
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetDefaultBackgroundColor
</UL>

<P><STRONG><a name="[19d]"></a>u8g_GetDefaultMidColor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetDefaultMidColor
</UL>

<P><STRONG><a name="[19c]"></a>u8g_SetDefaultMidColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, u8g_ll_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetColorIndex
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetDefaultMidColor
</UL>

<P><STRONG><a name="[19f]"></a>u8g_page_First</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, u8g_page.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb32h1_base_fn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_Init
</UL>

<P><STRONG><a name="[19e]"></a>u8g_page_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, u8g_page.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_First
</UL>

<P><STRONG><a name="[1a8]"></a>u8g_page_Next</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, u8g_page.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb32h1_base_fn
</UL>

<P><STRONG><a name="[1a1]"></a>u8g_pb32h1_Clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, u8g_pb32h1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb32h1_base_fn
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_Init
</UL>

<P><STRONG><a name="[1a0]"></a>u8g_pb32h1_Init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_pb32h1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_Clear
</UL>

<P><STRONG><a name="[1a3]"></a>u8g_pb32h1_set_pixel</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, u8g_pb32h1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8g_pb32h1_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_SetPixel
</UL>

<P><STRONG><a name="[1a2]"></a>u8g_pb32h1_SetPixel</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, u8g_pb32h1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8g_pb32h1_SetPixel &rArr; u8g_pb32h1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb32h1_base_fn
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_Set8PixelOpt2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_Set8PixelStd
</UL>

<P><STRONG><a name="[1a4]"></a>u8g_pb32h1_Set8PixelStd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, u8g_pb32h1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_SetPixel
</UL>

<P><STRONG><a name="[1a5]"></a>u8g_pb32h1_Set8PixelOpt2</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, u8g_pb32h1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g_pb32h1_Set8PixelOpt2 &rArr; u8g_pb32h1_SetPixel &rArr; u8g_pb32h1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb32h1_base_fn
</UL>

<P><STRONG><a name="[1a6]"></a>u8g_dev_pb32h1_base_fn</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, u8g_pb32h1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = u8g_dev_pb32h1_base_fn &rArr; u8g_pb32h1_Set8PixelOpt2 &rArr; u8g_pb32h1_SetPixel &rArr; u8g_pb32h1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_GetPageBox
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_Next
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_First
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_Set8PixelOpt2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_SetPixel
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb32h1_Clear
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Is8PixelVisible
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
</UL>

<P><STRONG><a name="[4bf]"></a>u8g_pb_Clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_pb.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>u8g_pb_IsYIntersection</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, u8g_pb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8g_pb_IsYIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_IsIntersection
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Is8PixelVisible
</UL>

<P><STRONG><a name="[1ac]"></a>u8g_pb_IsXIntersection</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, u8g_pb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_IsIntersection
</UL>

<P><STRONG><a name="[1aa]"></a>u8g_pb_IsIntersection</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, u8g_pb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_IsXIntersection
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_IsYIntersection
</UL>

<P><STRONG><a name="[1a9]"></a>u8g_pb_GetPageBox</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_pb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb32h1_base_fn
</UL>

<P><STRONG><a name="[1a7]"></a>u8g_pb_Is8PixelVisible</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, u8g_pb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_pb_Is8PixelVisible &rArr; u8g_pb_IsYIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_IsYIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb32h1_base_fn
</UL>

<P><STRONG><a name="[1ad]"></a>u8g_pb_WriteBuffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, u8g_pb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteSequence
</UL>

<P><STRONG><a name="[1af]"></a>u8g_draw_hline</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, u8g_rect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawRFrame
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_box
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawFrame
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHLine
</UL>

<P><STRONG><a name="[1b0]"></a>u8g_draw_vline</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, u8g_rect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = u8g_draw_vline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawRFrame
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawVLine
</UL>

<P><STRONG><a name="[1b1]"></a>u8g_DrawHLine</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, u8g_rect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_hline
</UL>

<P><STRONG><a name="[1b2]"></a>u8g_DrawVLine</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, u8g_rect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_disc_section
</UL>

<P><STRONG><a name="[1b3]"></a>u8g_DrawFrame</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, u8g_rect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = u8g_DrawFrame &rArr; u8g_draw_vline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_vline
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawFrame(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b4]"></a>u8g_draw_box</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, u8g_rect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawRBox
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBox
</UL>

<P><STRONG><a name="[1b5]"></a>u8g_DrawBox</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, u8g_rect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_box
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b6]"></a>u8g_DrawRFrame</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, u8g_rect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_circle
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_vline
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_hline
</UL>

<P><STRONG><a name="[1b8]"></a>u8g_DrawRBox</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, u8g_rect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_disc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_box
</UL>

<P><STRONG><a name="[66]"></a>u8g_state_dummy_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, u8g_state.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> u8g_ll_api.o(.text)
</UL>
<P><STRONG><a name="[4c0]"></a>u8g_SetHardwareBackup</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, u8g_state.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>u8g_draw_circle</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, u8g_circle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_circle_section
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawRFrame
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawCircle
</UL>

<P><STRONG><a name="[1bb]"></a>u8g_DrawCircle</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, u8g_circle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_circle
</UL>

<P><STRONG><a name="[1b9]"></a>u8g_draw_disc</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, u8g_circle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_disc_section
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawRBox
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawDisc
</UL>

<P><STRONG><a name="[1bd]"></a>u8g_DrawDisc</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, u8g_circle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_disc
</UL>

<P><STRONG><a name="[1be]"></a>u8g_DrawHBitmap</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, u8g_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = u8g_DrawHBitmap &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBitmap
</UL>

<P><STRONG><a name="[1bf]"></a>u8g_DrawBitmap</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, u8g_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = u8g_DrawBitmap &rArr; u8g_DrawHBitmap &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::init_menu()
</UL>

<P><STRONG><a name="[1c0]"></a>u8g_DrawHBitmapP</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, u8g_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = u8g_DrawHBitmapP &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBitmapP
</UL>

<P><STRONG><a name="[1c1]"></a>u8g_DrawBitmapP</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, u8g_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = u8g_DrawBitmapP &rArr; u8g_DrawHBitmapP &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHBitmapP
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawBitmapP(unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*)
</UL>

<P><STRONG><a name="[1c3]"></a>u8g_DrawXBM</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, u8g_bitmap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHXBM
</UL>

<P><STRONG><a name="[1c5]"></a>u8g_DrawXBMP</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, u8g_bitmap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHXBMP
</UL>

<P><STRONG><a name="[1c6]"></a>ST7920_SWSPI_SND_8BIT(unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, u8glib_st7920_128x64_rrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ST7920_SWSPI_SND_8BIT(unsigned char) &rArr; c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_WRITE_BYTES(unsigned char*, unsigned char)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_WRITE_BYTE(unsigned char)
</UL>

<P><STRONG><a name="[1c8]"></a>u8g_MicroDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8glib_st7920_128x64_rrd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Delay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_10MicroDelay
</UL>

<P><STRONG><a name="[12f]"></a>u8g_Delay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, u8glib_st7920_128x64_rrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_MicroDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
</UL>

<P><STRONG><a name="[1c9]"></a>u8g_10MicroDelay</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, u8glib_st7920_128x64_rrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = u8g_10MicroDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_MicroDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_WRITE_BYTES(unsigned char*, unsigned char)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_WRITE_BYTE(unsigned char)
</UL>

<P><STRONG><a name="[1ca]"></a>ST7920_WRITE_BYTE(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, u8glib_st7920_128x64_rrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ST7920_WRITE_BYTE(unsigned char) &rArr; ST7920_SWSPI_SND_8BIT(unsigned char) &rArr; c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_10MicroDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_SWSPI_SND_8BIT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
</UL>

<P><STRONG><a name="[1cb]"></a>ST7920_WRITE_BYTES(unsigned char*, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, u8glib_st7920_128x64_rrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ST7920_WRITE_BYTES(unsigned char*, unsigned char) &rArr; ST7920_SWSPI_SND_8BIT(unsigned char) &rArr; c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_10MicroDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_SWSPI_SND_8BIT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
</UL>

<P><STRONG><a name="[b]"></a>u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, u8glib_st7920_128x64_rrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*) &rArr; u8g_dev_pb32h1_base_fn &rArr; u8g_pb32h1_Set8PixelOpt2 &rArr; u8g_pb32h1_SetPixel &rArr; u8g_pb32h1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Delay
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb32h1_base_fn
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalWrite(unsigned char, unsigned char)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOn(rcc_clk_id)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_WRITE_BYTES(unsigned char*, unsigned char)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_WRITE_BYTE(unsigned char)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_10MicroDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_SWSPI_SND_8BIT(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8glib_st7920_128x64_rrd.o(.data)
</UL>
<P><STRONG><a name="[381]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1d1]"></a>_sys_open</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[1d4]"></a>_sys_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fat_wclose &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[1d6]"></a>_sys_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1d8]"></a>_sys_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[362]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1da]"></a>_sys_seek</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[1dc]"></a>_sys_ensure</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[1de]"></a>_sys_flen</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_flen &rArr; __sys_flen &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[4c1]"></a>_sys_tmpnam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[4c2]"></a>_sys_command_string</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[40f]"></a>fs_config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_cfg_drv
</UL>

<P><STRONG><a name="[4c3]"></a>efs_rename</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>efs_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[3ab]"></a>efs_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[4c4]"></a>efs_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[4c5]"></a>efs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[39f]"></a>efs_wclose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[3ad]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[3b1]"></a>efs_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[3a0]"></a>efs_ensure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[3af]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[3a1]"></a>efs_fsize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[3a9]"></a>efs_find</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[4c6]"></a>efs_analyse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[4c7]"></a>efs_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[4c8]"></a>efs_defrag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[4c9]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[1e6]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[4cb]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4cf]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d1]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d2]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d4]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d5]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d6]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d7]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d9]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4da]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[209]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOn(rcc_clk_id)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOff(rcc_clk_id)
</UL>

<P><STRONG><a name="[20b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOn(rcc_clk_id)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOff(rcc_clk_id)
</UL>

<P><STRONG><a name="[20a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOn(rcc_clk_id)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOff(rcc_clk_id)
</UL>

<P><STRONG><a name="[1e9]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerReset(rcc_clk_id)
</UL>

<P><STRONG><a name="[1ea]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerReset(rcc_clk_id)
</UL>

<P><STRONG><a name="[4db]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4df]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4e0]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
</UL>

<P><STRONG><a name="[23e]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
</UL>

<P><STRONG><a name="[4e1]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::txIsr()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::dmaTxFxn()
</UL>

<P><STRONG><a name="[241]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
</UL>

<P><STRONG><a name="[4e2]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
</UL>

<P><STRONG><a name="[4e3]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[4e4]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[4e5]"></a>DMA_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_dma1_channel4
</UL>

<P><STRONG><a name="[1e8]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1eb]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::begin(unsigned)
</UL>

<P><STRONG><a name="[4e6]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e7]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
</UL>

<P><STRONG><a name="[4e9]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
</UL>

<P><STRONG><a name="[4ea]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4ec]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4ed]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4ee]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4ef]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f1]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f3]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f4]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f5]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f6]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f7]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f8]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4f9]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4fa]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4fb]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4fc]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4fd]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4fe]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__irq_dma1_channel1</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, m_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __irq_dma1_channel1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::loopGetData(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b4]"></a>c_adc::analogRead(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::sampleTemp()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTask()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::sys_status_menu()
</UL>

<P><STRONG><a name="[1ed]"></a>c_adc::loopGetData(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, m_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = c_adc::loopGetData(unsigned char) &rArr; __irq_dma1_channel1
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_dma1_channel1
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
</UL>

<P><STRONG><a name="[1f3]"></a>c_adc::set_sample_rate(const adc_dev*, adc_smp_rate)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, m_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_adc::set_sample_rate(const adc_dev*, adc_smp_rate)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::init(const adc_dev*)
</UL>

<P><STRONG><a name="[1ee]"></a>c_adc::calibrate(const adc_dev*)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, m_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_adc::calibrate(const adc_dev*) &rArr; bb_perip(volatile void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_perip(volatile void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::init(const adc_dev*)
</UL>

<P><STRONG><a name="[1f0]"></a>c_adc::init(const adc_dev*)</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, m_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = c_adc::init(const adc_dev*) &rArr; c_adc::calibrate(const adc_dev*) &rArr; bb_perip(volatile void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOn(rcc_clk_id)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::irqEnable(IRQn)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::set_prescaler(rcc_prescaler, unsigned)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::calibrate(const adc_dev*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::set_sample_rate(const adc_dev*, adc_smp_rate)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[285]"></a>c_adc::start()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, m_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task()
</UL>

<P><STRONG><a name="[284]"></a>c_adc::initCh(unsigned char, adc_factor)</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, m_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_adc::initCh(unsigned char, adc_factor)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task()
</UL>

<P><STRONG><a name="[1fc]"></a>c_gpio::c_gpio(gpio_dev*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_m_gpio_cpp
</UL>

<P><STRONG><a name="[4ff]"></a>c_gpio::c_gpio__sub_object(gpio_dev*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, m_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>c_gpio::pinMode(unsigned char, WiringPinMode)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, m_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOn(rcc_clk_id)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::gpio_set_mode(gpio_dev*, unsigned char, gpio_pin_mode)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setPinMode(timer_dev*, unsigned char, timer_mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::PinInit()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::c_temp(ts_temperature*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setOut(unsigned)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::c_stepMoto(ts_step_moto*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTask()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainLoopTask()
</UL>

<P><STRONG><a name="[1f6]"></a>c_gpio::setPwmFormat(unsigned char, unsigned short, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, m_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_gpio::setPwmFormat(unsigned char, unsigned short, unsigned char) &rArr; c_timer::setPeriod(timer_dev*, unsigned) &rArr; c_timer::setPrescaleFactor(timer_dev*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setPeriod(timer_dev*, unsigned)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setOcActive(timer_dev*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::c_temp(ts_temperature*)
</UL>

<P><STRONG><a name="[2af]"></a>c_gpio::setPwmDuty(unsigned char, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, m_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = c_gpio::setPwmDuty(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setOut(unsigned)
</UL>

<P><STRONG><a name="[2b1]"></a>c_gpio::getPwmPeriod(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::c_temp(ts_temperature*)
</UL>

<P><STRONG><a name="[1fa]"></a>c_gpio::digitalRead(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, m_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = c_gpio::digitalRead(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::isButtonPressed(unsigned char, unsigned)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M0_M1()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::getMaxLimitF(bool, bool, bool)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainLoopTask()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::encoderFxn(unsigned char)
</UL>

<P><STRONG><a name="[1c7]"></a>c_gpio::digitalWrite(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, m_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_SWSPI_SND_8BIT(unsigned char)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::PinSet(unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M17()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setOut(unsigned)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::stop()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M84()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainLoopTask()
</UL>

<P><STRONG><a name="[500]"></a>c_gpio::toggle(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, m_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>c_gpio::isButtonPressed(unsigned char, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, m_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalRead(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::waitForButtonPress(unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1fb]"></a>c_gpio::waitForButtonPress(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, m_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::isButtonPressed(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[41]"></a>__irq_tim1_cc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __irq_tim1_cc &rArr; dispatch_adv_cc(timer_dev*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_adv_cc(timer_dev*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>__irq_tim2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __irq_tim2 &rArr; dispatch_general(timer_dev*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_general(timer_dev*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>__irq_tim3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __irq_tim3 &rArr; dispatch_general(timer_dev*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_general(timer_dev*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>__irq_tim4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __irq_tim4 &rArr; dispatch_general(timer_dev*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_general(timer_dev*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1ff]"></a>__irq_tim8</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_general(timer_dev*)
</UL>

<P><STRONG><a name="[208]"></a>c_timer::c_timer(timer_dev*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_m_timer_cpp
</UL>

<P><STRONG><a name="[501]"></a>c_timer::c_timer__sub_object(timer_dev*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, m_timer.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>c_timer::setOcEnable(timer_dev*, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_timer::setOcEnable(timer_dev*, unsigned char) &rArr; bb_perip(volatile void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_perip(volatile void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setPinMode(timer_dev*, unsigned char, timer_mode)
</UL>

<P><STRONG><a name="[203]"></a>c_timer::setOcModle(timer_dev*, unsigned char, timer_oc_mode, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_timer::setOcModle(timer_dev*, unsigned char, timer_oc_mode, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::init(timer_dev*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setPinMode(timer_dev*, unsigned char, timer_mode)
</UL>

<P><STRONG><a name="[202]"></a>c_timer::detachInterrupt(timer_dev*, int)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::disableChannel(timer_dev*, int)
</UL>

<P><STRONG><a name="[201]"></a>c_timer::disableChannel(timer_dev*, int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setPinMode(timer_dev*, unsigned char, timer_mode)
</UL>

<P><STRONG><a name="[1f5]"></a>c_timer::setPinMode(timer_dev*, unsigned char, timer_mode)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::disableChannel(timer_dev*, int)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setOcModle(timer_dev*, unsigned char, timer_oc_mode, unsigned char)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setOcEnable(timer_dev*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
</UL>

<P><STRONG><a name="[204]"></a>c_timer::init(timer_dev*)</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = c_timer::init(timer_dev*) &rArr; c_timer::setOcModle(timer_dev*, unsigned char, timer_oc_mode, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOn(rcc_clk_id)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setOverflow(timer_dev*, unsigned short)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setOcModle(timer_dev*, unsigned char, timer_oc_mode, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[2ac]"></a>c_timer::pauseInterrupt(timer_dev*, int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_timer::pauseInterrupt(timer_dev*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::pauseInterrupt()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::c_stepMoto(ts_step_moto*)
</UL>

<P><STRONG><a name="[291]"></a>c_timer::resumeInterrupt(timer_dev*, int)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_timer::resumeInterrupt(timer_dev*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::resumeInterrupt()
</UL>

<P><STRONG><a name="[1f7]"></a>c_timer::setPeriod(timer_dev*, unsigned)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_timer::setPeriod(timer_dev*, unsigned) &rArr; c_timer::setPrescaleFactor(timer_dev*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setPrescaleFactor(timer_dev*, unsigned)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setOverflow(timer_dev*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::setPwmFormat(unsigned char, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[1f8]"></a>c_timer::setOcActive(timer_dev*, unsigned char, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_timer::setOcActive(timer_dev*, unsigned char, unsigned char) &rArr; bb_perip(volatile void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_perip(volatile void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::setPwmFormat(unsigned char, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[207]"></a>c_timer::attachInterrupt(timer_dev*, int, void(*)())</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_timer::attachInterrupt(timer_dev*, int, void(*)()) &rArr; c_nvic::irqEnable(IRQn)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::irqEnable(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::c_stepMoto(ts_step_moto*)
</UL>

<P><STRONG><a name="[20e]"></a>c_rcc::c_rcc(int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_m_rcc_cpp
</UL>

<P><STRONG><a name="[502]"></a>c_rcc::c_rcc__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, m_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>c_rcc::powerOn(rcc_clk_id)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, m_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_rcc::powerOn(rcc_clk_id)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::InitPort(void(*)())
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::init(timer_dev*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::init(const adc_dev*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_exti::begin(unsigned char, void(*)(), exti_trigger_mode)
</UL>

<P><STRONG><a name="[20c]"></a>c_rcc::powerOff(rcc_clk_id)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, m_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::end()
</UL>

<P><STRONG><a name="[20d]"></a>c_rcc::powerReset(rcc_clk_id)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, m_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1f2]"></a>c_rcc::set_prescaler(rcc_prescaler, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, m_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = c_rcc::set_prescaler(rcc_prescaler, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::init(const adc_dev*)
</UL>

<P><STRONG><a name="[cb]"></a>Print::write(const char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_serial.o(.constdata__ZTV6serial)
<LI> m_print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[cc]"></a>Print::write(const void*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_serial.o(.constdata__ZTV6serial)
<LI> m_print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[20f]"></a>Print::ftoa(float, char*, unsigned char, unsigned char)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Print::ftoa(float, char*, unsigned char, unsigned char) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::vprintf(const char*, ...)
</UL>

<P><STRONG><a name="[214]"></a>Print::itoa(int, char*, int)</STRONG> (Thumb, 124 bytes, Stack size 28 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Print::itoa(int, char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::vprintf(const char*, ...)
</UL>

<P><STRONG><a name="[213]"></a>Print::vprintf(const char*, ...)</STRONG> (Thumb, 470 bytes, Stack size 88 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Print::vprintf(const char*, ...) &rArr; Print::ftoa(float, char*, unsigned char, unsigned char) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::itoa(int, char*, int)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::ftoa(float, char*, unsigned char, unsigned char)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
</UL>

<P><STRONG><a name="[217]"></a>Print::print(char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(char)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, te_base)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic_P(unsigned char, const char*, char, const char*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
</UL>

<P><STRONG><a name="[223]"></a>Print::print(const char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::getStatus()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::pushCommand(ts_commu_buf*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::requestResend()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic_P(unsigned char, const char*, char, const char*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::checkAndPushCommand(ts_commu_buf*)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::removeFile(char*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::write(const char*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::open(const char*, const char*)
</UL>

<P><STRONG><a name="[216]"></a>Print::printNumber(unsigned long long, unsigned char)</STRONG> (Thumb, 142 bytes, Stack size 96 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, te_base)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, te_base)
</UL>

<P><STRONG><a name="[219]"></a>Print::print(unsigned long long, te_base)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Print::print(unsigned long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned long long, te_base)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned long, te_base)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, te_base)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, te_base)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, te_base)
</UL>

<P><STRONG><a name="[21a]"></a>Print::print(unsigned char, te_base)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, m_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, te_base)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned char, te_base)
</UL>

<P><STRONG><a name="[21b]"></a>Print::print(long long, te_base)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long long, te_base)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, te_base)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, te_base)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, te_base)
</UL>

<P><STRONG><a name="[21c]"></a>Print::print(int, te_base)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, te_base)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, te_base)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTask()
</UL>

<P><STRONG><a name="[21d]"></a>Print::print(unsigned, te_base)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Print::print(unsigned, te_base) &rArr; Print::print(unsigned long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, te_base)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, te_base)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::getStatus()
</UL>

<P><STRONG><a name="[21e]"></a>Print::print(long, te_base)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, m_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, te_base)
</UL>

<P><STRONG><a name="[21f]"></a>Print::print(unsigned long, te_base)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, m_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, te_base)
</UL>

<P><STRONG><a name="[220]"></a>Print::printFloat(double, unsigned char)</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Print::printFloat(double, unsigned char) &rArr; Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, te_base)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, te_base)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>

<P><STRONG><a name="[22c]"></a>Print::print(double, int)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
</UL>

<P><STRONG><a name="[22d]"></a>Print::println()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::println() &rArr; Print::print(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned long long, te_base)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long long, te_base)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned long, te_base)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, te_base)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, te_base)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, te_base)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned char, te_base)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(char)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTask()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::requestResend()
</UL>

<P><STRONG><a name="[22e]"></a>Print::println(char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, m_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>

<P><STRONG><a name="[22f]"></a>Print::println(const char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Print::println(const char*) &rArr; Print::println() &rArr; Print::print(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::getStatus()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::ls()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M20()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseBinary(unsigned char*, ts_commu_buf*, bool)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::checkAndPushCommand(ts_commu_buf*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseAscii(char*, ts_commu_buf*, bool)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::writeCmd(char*)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::writeCmdEnd()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::removeFile(char*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::write(const char*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::open(const char*, const char*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
</UL>

<P><STRONG><a name="[230]"></a>Print::println(unsigned char, te_base)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, te_base)
</UL>

<P><STRONG><a name="[231]"></a>Print::println(int, te_base)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Print::println(int, te_base) &rArr; Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, te_base)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::pushCommand(ts_commu_buf*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::requestResend()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::checkAndPushCommand(ts_commu_buf*)
</UL>

<P><STRONG><a name="[232]"></a>Print::println(unsigned, te_base)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Print::println(unsigned, te_base) &rArr; Print::print(unsigned, te_base) &rArr; Print::print(unsigned long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, te_base)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::getStatus()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::open(const char*, const char*)
</UL>

<P><STRONG><a name="[233]"></a>Print::println(long, te_base)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, m_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, te_base)
</UL>

<P><STRONG><a name="[234]"></a>Print::println(unsigned long, te_base)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, m_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, te_base)
</UL>

<P><STRONG><a name="[235]"></a>Print::println(long long, te_base)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, m_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, te_base)
</UL>

<P><STRONG><a name="[236]"></a>Print::println(unsigned long long, te_base)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, m_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, te_base)
</UL>

<P><STRONG><a name="[237]"></a>Print::println(double, int)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, m_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
</UL>

<P><STRONG><a name="[238]"></a>serial::dmaTxFxn()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, m_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial::dmaTxFxn()
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::write(unsigned char)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::txIsr()
</UL>

<P><STRONG><a name="[23a]"></a>serial::txIsr()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial::txIsr() &rArr; serial::dmaTxFxn()
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::dmaTxFxn()
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_dma1_channel4
</UL>

<P><STRONG><a name="[34]"></a>__irq_dma1_channel4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __irq_dma1_channel4 &rArr; serial::txIsr() &rArr; serial::dmaTxFxn()
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::txIsr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23c]"></a>serial::serial(usart_dev*)</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, m_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = serial::serial(usart_dev*) &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOn(rcc_clk_id)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::irqEnable(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_m_serial_cpp
</UL>

<P><STRONG><a name="[503]"></a>serial::serial__sub_object(usart_dev*)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, m_serial.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>serial::begin(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, m_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = serial::begin(unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[504]"></a>serial::read()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, m_serial.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>serial::end()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOff(rcc_clk_id)
</UL>

<P><STRONG><a name="[505]"></a>serial::available()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m_serial.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>serial::write(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, m_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial::write(unsigned char) &rArr; serial::dmaTxFxn()
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::dmaTxFxn()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_serial.o(.constdata__ZTV6serial)
</UL>
<P><STRONG><a name="[ce]"></a>serial::write(unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial::write(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_serial.o(.constdata__ZTV6serial)
</UL>
<P><STRONG><a name="[506]"></a>serial::flush()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_serial.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>c_usb::Leave_LowPowerMode()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::Resume_Init()
</UL>

<P><STRONG><a name="[245]"></a>c_usb::Resume_Init()</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = c_usb::Resume_Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::Leave_LowPowerMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::Resume(_RESUME_STATE)
</UL>

<P><STRONG><a name="[247]"></a>c_usb::Resume(_RESUME_STATE)</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = c_usb::Resume(_RESUME_STATE) &rArr; c_usb::Resume_Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::Resume_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::USB_Istr()
</UL>

<P><STRONG><a name="[249]"></a>c_usb::Enter_LowPowerMode()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::Suspend()
</UL>

<P><STRONG><a name="[248]"></a>c_usb::Suspend()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_usb::Suspend()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::Enter_LowPowerMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::USB_Istr()
</UL>

<P><STRONG><a name="[24a]"></a>c_usb::USB_Istr()</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = c_usb::USB_Istr() &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::Suspend()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::Resume(_RESUME_STATE)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_usb_lp_can_rx0
</UL>

<P><STRONG><a name="[3a]"></a>__irq_usb_lp_can_rx0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __irq_usb_lp_can_rx0 &rArr; c_usb::USB_Istr() &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::USB_Istr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24b]"></a>c_usb::PinSet(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = c_usb::PinSet(unsigned char) &rArr; c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::beging(usblib_dev*)
</UL>

<P><STRONG><a name="[24c]"></a>c_usb::PinInit()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = c_usb::PinInit() &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::beging(usblib_dev*)
</UL>

<P><STRONG><a name="[24d]"></a>c_usb::beging(usblib_dev*)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = c_usb::beging(usblib_dev*) &rArr; c_usb::PinInit() &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCopy(char*, char*, int)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::PinInit()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::PinSet(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::begin()
</UL>

<P><STRONG><a name="[98]"></a>c_usb::User_SetDeviceAddress()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_usb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>c_usb::User_SetConfiguration()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_usb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>c_usb::NvicUsb()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_usb::NvicUsb() &rArr; c_nvic::irqEnable(IRQn)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::irqEnable(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::InitPort(void(*)())
</UL>

<P><STRONG><a name="[253]"></a>c_usb::Get_SerialNum()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::InitPort(void(*)())
</UL>

<P><STRONG><a name="[252]"></a>c_usb::InitPort(void(*)())</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_usb::InitPort(void(*)()) &rArr; c_rcc::powerOn(rcc_clk_id)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOn(rcc_clk_id)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::Get_SerialNum()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::NvicUsb()
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbVcom()
</UL>

<P><STRONG><a name="[254]"></a>c_usb::ResetPort(void(*)())</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = c_usb::ResetPort(void(*)()) &rArr; SetDeviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetUsbVcom()
</UL>

<P><STRONG><a name="[507]"></a>c_usb::Process_Status_IN()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_usb.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>c_usb::getSetLineCoding(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m_usb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_usb.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>c_usb::Class_Data_Setup(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_usb::Class_Data_Setup(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>c_usb::Class_NoData_Setup(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, m_usb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>c_usb::Class_Get_Interface_Setting(unsigned char, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_usb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>c_usb::GetDeviceDescriptor(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_usb::GetDeviceDescriptor(unsigned short) &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>c_usb::GetConfigDescriptor(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_usb::GetConfigDescriptor(unsigned short) &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>c_usb::GetStringDescriptor(unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_usb::GetStringDescriptor(unsigned short) &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[508]"></a>c_usb::IntToUnicode(unsigned, unsigned char*, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, m_usb.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>bb_perip(volatile void*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_sysconf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bb_perip(volatile void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setOcEnable(timer_dev*, unsigned char)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setOcActive(timer_dev*, unsigned char, unsigned char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::calibrate(const adc_dev*)
</UL>

<P><STRONG><a name="[69]"></a>voidFunc()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_sysconf.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.text)
</UL>
<P><STRONG><a name="[24f]"></a>memCopy(char*, char*, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m_sysconf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memCopy(char*, char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::beging(usblib_dev*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::getGcodeLock(ts_commu_buf*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_reStoreFailsafe()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_loadEprom()
</UL>

<P><STRONG><a name="[258]"></a>serialEpInit()</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serialEpInit() &rArr; SetEPRxAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.text)
</UL>
<P><STRONG><a name="[25e]"></a>usbSerial::Handle_USBAsynchXfer()</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usbSerial::Handle_USBAsynchXfer() &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxValid
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_safe_remove(ring_buffer*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_full_count(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOF_UsbVcom()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback_UsbVcom()
</UL>

<P><STRONG><a name="[99]"></a>EP1_IN_Callback_UsbVcom()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EP1_IN_Callback_UsbVcom() &rArr; usbSerial::Handle_USBAsynchXfer() &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::Handle_USBAsynchXfer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>EP3_OUT_Callback_UsbVcom()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EP3_OUT_Callback_UsbVcom() &rArr; USB_SIL_Read &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_safe_insert(ring_buffer*, unsigned char)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[509]"></a>usb_set_ep_tx_stat(unsigned char, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m_usbserial.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>RESET_UsbVcom()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RESET_UsbVcom()
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_reset(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>SOF_UsbVcom()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SOF_UsbVcom() &rArr; usbSerial::Handle_USBAsynchXfer() &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::Handle_USBAsynchXfer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>InitUsbVcom()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitUsbVcom() &rArr; c_usb::InitPort(void(*)()) &rArr; c_rcc::powerOn(rcc_clk_id)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::InitPort(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ResetUsbVcom()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ResetUsbVcom() &rArr; c_usb::ResetPort(void(*)()) &rArr; SetDeviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::ResetPort(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata)
</UL>
<P><STRONG><a name="[266]"></a>usbSerial::begin()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = usbSerial::begin() &rArr; c_usb::beging(usblib_dev*) &rArr; c_usb::PinInit() &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_init(ring_buffer*, unsigned short, unsigned char*)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::beging(usblib_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task()
</UL>

<P><STRONG><a name="[282]"></a>usbSerial::setSem()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbSerial::setSem()
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task()
</UL>

<P><STRONG><a name="[268]"></a>usbSerial::flush()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbSerial::flush()
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_reset(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::codeLoop()
</UL>

<P><STRONG><a name="[269]"></a>usbSerial::available()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbSerial::available() &rArr; rb_full_count(ring_buffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_full_count(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::codeLoop()
</UL>

<P><STRONG><a name="[26a]"></a>usbSerial::read(void*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, m_usbserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_safe_remove(ring_buffer*)
</UL>

<P><STRONG><a name="[26b]"></a>usbSerial::read()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbSerial::read() &rArr; rb_safe_remove(ring_buffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_safe_remove(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::codeLoop()
</UL>

<P><STRONG><a name="[cf]"></a>usbSerial::write(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbSerial::write(unsigned char) &rArr; rb_safe_insert(ring_buffer*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_safe_insert(ring_buffer*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata__ZTV9usbSerial)
</UL>
<P><STRONG><a name="[d0]"></a>usbSerial::write(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbSerial::write(const char*) &rArr; rb_safe_insert(ring_buffer*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_safe_insert(ring_buffer*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata__ZTV9usbSerial)
</UL>
<P><STRONG><a name="[d1]"></a>usbSerial::write(const void*, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbSerial::write(const void*, unsigned) &rArr; rb_safe_insert(ring_buffer*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_safe_insert(ring_buffer*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.constdata__ZTV9usbSerial)
</UL>
<P><STRONG><a name="[26c]"></a>usbSerial::usbSerial()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_usbserial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_m_usbSerial_cpp
</UL>

<P><STRONG><a name="[50a]"></a>usbSerial::usbSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, m_usbserial.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>init()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m_mapleinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init() &rArr; c_timer::init(timer_dev*) &rArr; c_timer::setOcModle(timer_dev*, unsigned char, timer_oc_mode, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::init(timer_dev*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::init(const adc_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;premain()
</UL>

<P><STRONG><a name="[da]"></a>premain()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m_mapleinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = premain() &rArr; init() &rArr; c_timer::init(timer_dev*) &rArr; c_timer::setOcModle(timer_dev*, unsigned char, timer_oc_mode, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_mapleinit.o(.init_array)
</UL>
<P><STRONG><a name="[274]"></a>c_nvic::globalEnable()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::stop()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::wirte(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[26f]"></a>c_nvic::globalDisable()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::stop()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::wirte(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[50b]"></a>c_nvic::irqEnable(IRQn, unsigned char, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, m_nvic.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>c_nvic::irqEnable(IRQn)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_nvic::irqEnable(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::NvicUsb()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::attachInterrupt(timer_dev*, int, void(*)())
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::init(const adc_dev*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_exti::begin(unsigned char, void(*)(), exti_trigger_mode)
</UL>

<P><STRONG><a name="[50c]"></a>c_nvic::irqDisable(IRQn)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_nvic.o(.text), UNUSED)

<P><STRONG><a name="[50d]"></a>c_nvic::priorityGroup(nvic_priority_Group)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_nvic.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>c_eep::UnInit()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_eep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::wirte(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[272]"></a>c_eep::ProgramPage(unsigned long, unsigned long, unsigned char*)</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, m_eep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = c_eep::ProgramPage(unsigned long, unsigned long, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::wirte(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[271]"></a>c_eep::EraseSector(unsigned long)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, m_eep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::wirte(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[270]"></a>c_eep::Init()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, m_eep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::wirte(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[26e]"></a>c_eep::wirte(unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, m_eep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_eep::wirte(unsigned char*, unsigned, unsigned short) &rArr; c_eep::ProgramPage(unsigned long, unsigned long, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::Init()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::EraseSector(unsigned long)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::ProgramPage(unsigned long, unsigned long, unsigned char*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::UnInit()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::globalDisable()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::globalEnable()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_storeEprom()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_reStoreFailsafe()
</UL>

<P><STRONG><a name="[1cf]"></a>spi1_init</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, m_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[1d0]"></a>spi1_sent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[50e]"></a>spi1_sentBuf</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, m_spi.o(.text), UNUSED)

<P><STRONG><a name="[50f]"></a>spi1_recBuf</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_spi.o(.text), UNUSED)

<P><STRONG><a name="[510]"></a>spi1_BusSpeed</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, m_spi.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__irq_exti0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __irq_exti0 &rArr; dispatch_single_exti(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_single_exti(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>__irq_exti1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __irq_exti1 &rArr; dispatch_single_exti(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_single_exti(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>__irq_exti2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __irq_exti2 &rArr; dispatch_single_exti(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_single_exti(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>__irq_exti3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __irq_exti3 &rArr; dispatch_single_exti(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_single_exti(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>__irq_exti4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __irq_exti4 &rArr; dispatch_single_exti(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_single_exti(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>__irq_exti9_5</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __irq_exti9_5 &rArr; dispatch_extis(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_extis(unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>__irq_exti15_10</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __irq_exti15_10 &rArr; dispatch_extis(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_extis(unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[277]"></a>c_exti::begin(unsigned char, void(*)(), exti_trigger_mode)</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_exti::begin(unsigned char, void(*)(), exti_trigger_mode) &rArr; c_rcc::powerOn(rcc_clk_id)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::powerOn(rcc_clk_id)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::irqEnable(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::c_stepMoto(ts_step_moto*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTask()
</UL>

<P><STRONG><a name="[511]"></a>c_exti::close(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_exti.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>c_exti::setMode(unsigned char, exti_trigger_mode)</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = c_exti::setMode(unsigned char, exti_trigger_mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::encoderFxn(unsigned char)
</UL>

<P><STRONG><a name="[307]"></a>c_exti::pause(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_exti::pause(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::encoderFxn(unsigned char)
</UL>

<P><STRONG><a name="[308]"></a>c_exti::resume(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_exti::resume(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::encoderFxn(unsigned char)
</UL>

<P><STRONG><a name="[279]"></a>taskRunEnable()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcodeTsk()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commuTsk()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTask()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdReaderTask()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainLoopTask()
</UL>

<P><STRONG><a name="[278]"></a>mainLoopTask()</STRONG> (Thumb, 562 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mainLoopTask() &rArr; c_gcode::G28() &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalWrite(unsigned char, unsigned char)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalRead(unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::stop()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M84()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::outManage()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskRunEnable()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>os_idle_demon</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = os_idle_demon &rArr; c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalWrite(unsigned char, unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[43b]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[281]"></a>init_task()</STRONG> (Thumb, 308 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = init_task() &rArr; c_sdReader::init() &rArr; c_sdReader::close() &rArr; c_gcode::moveRelative(float, float, float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::setSem()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::begin()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::initCh(unsigned char, adc_factor)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::start()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = main &rArr; serial::begin(unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCopy(char*, char*, int)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::begin(unsigned)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::wirte(unsigned char*, unsigned, unsigned short)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[288]"></a>maxLimitIsr(int)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stepmoto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max5LimitIsr()
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max4LimitIsr()
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max3LimitIsr()
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max2LimitIsr()
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max1LimitIsr()
</UL>

<P><STRONG><a name="[d]"></a>max1LimitIsr()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = max1LimitIsr()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxLimitIsr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>max2LimitIsr()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = max2LimitIsr()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxLimitIsr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>max3LimitIsr()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = max3LimitIsr()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxLimitIsr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>max4LimitIsr()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = max4LimitIsr()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxLimitIsr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>max5LimitIsr()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = max5LimitIsr()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxLimitIsr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.data)
</UL>
<P><STRONG><a name="[289]"></a>minLimitIsr(int)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stepmoto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min5LimitIsr()
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min4LimitIsr()
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min3LimitIsr()
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min2LimitIsr()
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min1LimitIsr()
</UL>

<P><STRONG><a name="[12]"></a>min1LimitIsr()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = min1LimitIsr()
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minLimitIsr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>min2LimitIsr()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = min2LimitIsr()
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minLimitIsr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>min3LimitIsr()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = min3LimitIsr()
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minLimitIsr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>min4LimitIsr()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = min4LimitIsr()
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minLimitIsr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>min5LimitIsr()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = min5LimitIsr()
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minLimitIsr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.data)
</UL>
<P><STRONG><a name="[28b]"></a>c_stepMoto::setCompare(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_stepMoto::setCompare(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::trigger()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
</UL>

<P><STRONG><a name="[74]"></a>stepIsr()</STRONG> (Thumb, 1262 bytes, Stack size 24 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = stepIsr() &rArr; c_temp::setOut(unsigned) &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalWrite(unsigned char, unsigned char)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::loopGetData(unsigned char)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setOut(unsigned)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::setCompare(unsigned short)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_is_empty(ring_buffer*)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.text)
</UL>
<P><STRONG><a name="[294]"></a>c_stepMoto::resumeTimer()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stepmoto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::trigger()
</UL>

<P><STRONG><a name="[290]"></a>c_stepMoto::resumeInterrupt()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_stepMoto::resumeInterrupt() &rArr; c_timer::resumeInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::resumeInterrupt(timer_dev*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::trigger()
</UL>

<P><STRONG><a name="[292]"></a>c_stepMoto::trigger()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = c_stepMoto::trigger() &rArr; c_gcode::M17() &rArr; c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M17()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::resumeInterrupt()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::resumeTimer()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::setCompare(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
</UL>

<P><STRONG><a name="[295]"></a>c_stepMoto::rate_acc_2_Steps(unsigned, unsigned, float)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_stepMoto::rate_acc_2_Steps(unsigned, unsigned, float) &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)
</UL>

<P><STRONG><a name="[299]"></a>c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::rate_acc_2_Steps(unsigned, unsigned, float)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::globalDisable()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::globalEnable()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::recalculate_trapezoids()
</UL>

<P><STRONG><a name="[29c]"></a>c_stepMoto::recalculate_trapezoids()</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_get_NextIndex(ring_buffer*, unsigned short)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
</UL>

<P><STRONG><a name="[29e]"></a>c_stepMoto::dis_acc_2_speed(float, float, float)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_stepMoto::dis_acc_2_speed(float, float, float) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_pass_kernel(ts_stepBlockRun*, ts_stepBlockRun*, ts_stepBlockRun*)
</UL>

<P><STRONG><a name="[2a0]"></a>c_stepMoto::planner_pass_kernel(ts_stepBlockRun*, ts_stepBlockRun*, ts_stepBlockRun*)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = c_stepMoto::planner_pass_kernel(ts_stepBlockRun*, ts_stepBlockRun*, ts_stepBlockRun*) &rArr; c_stepMoto::dis_acc_2_speed(float, float, float) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::dis_acc_2_speed(float, float, float)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_reverse_pass()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_forward_pass()
</UL>

<P><STRONG><a name="[2a1]"></a>c_stepMoto::planner_forward_pass()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = c_stepMoto::planner_forward_pass() &rArr; c_stepMoto::planner_pass_kernel(ts_stepBlockRun*, ts_stepBlockRun*, ts_stepBlockRun*) &rArr; c_stepMoto::dis_acc_2_speed(float, float, float) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_pass_kernel(ts_stepBlockRun*, ts_stepBlockRun*, ts_stepBlockRun*)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_get_NextIndex(ring_buffer*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
</UL>

<P><STRONG><a name="[2a2]"></a>c_stepMoto::planner_reverse_pass()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = c_stepMoto::planner_reverse_pass() &rArr; c_stepMoto::planner_pass_kernel(ts_stepBlockRun*, ts_stepBlockRun*, ts_stepBlockRun*) &rArr; c_stepMoto::dis_acc_2_speed(float, float, float) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_pass_kernel(ts_stepBlockRun*, ts_stepBlockRun*, ts_stepBlockRun*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
</UL>

<P><STRONG><a name="[2a3]"></a>c_stepMoto::move(float*, float)</STRONG> (Thumb, 3558 bytes, Stack size 96 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_reverse_pass()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_forward_pass()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::dis_acc_2_speed(float, float, float)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::recalculate_trapezoids()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::trigger()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_is_empty(ring_buffer*)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lroundf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::homeAxis(unsigned char, float, float*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
</UL>

<P><STRONG><a name="[2e2]"></a>c_stepMoto::initMbx()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_stepMoto::initMbx()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcodeTsk()
</UL>

<P><STRONG><a name="[2a5]"></a>c_stepMoto::setPosSteps(float*)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_stepMoto::setPosSteps(float*) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurPos(float, float, float, float)
</UL>

<P><STRONG><a name="[512]"></a>c_stepMoto::setPos2Real()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stepmoto.o(.text), UNUSED)

<P><STRONG><a name="[513]"></a>c_stepMoto::setReal2Pos()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stepmoto.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>c_stepMoto::getRealZmm()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_stepMoto::getRealZmm() &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
</UL>

<P><STRONG><a name="[2a7]"></a>c_stepMoto::getPosZmm()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_stepMoto::getPosZmm() &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
</UL>

<P><STRONG><a name="[2cb]"></a>c_stepMoto::clearLimitF()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stepmoto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::homeAxis(unsigned char, float, float*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
</UL>

<P><STRONG><a name="[2a8]"></a>c_stepMoto::getMaxLimitF(bool, bool, bool)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_stepMoto::getMaxLimitF(bool, bool, bool) &rArr; c_gpio::digitalRead(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalRead(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
</UL>

<P><STRONG><a name="[2c3]"></a>c_stepMoto::waitFinish()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_stepMoto::waitFinish()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G4()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::homeAxis(unsigned char, float, float*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G92()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M0_M1()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M106()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M84()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::close()
</UL>

<P><STRONG><a name="[2a9]"></a>c_stepMoto::steps_acc_2_rate(unsigned, unsigned, float)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, stepmoto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>

<P><STRONG><a name="[2aa]"></a>c_stepMoto::c_stepMoto(ts_step_moto*)</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = c_stepMoto::c_stepMoto(ts_step_moto*) &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::attachInterrupt(timer_dev*, int, void(*)())
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::pauseInterrupt(timer_dev*, int)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::pause(timer_dev*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_exti::begin(unsigned char, void(*)(), exti_trigger_mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_stepMoto_cpp
</UL>

<P><STRONG><a name="[514]"></a>c_stepMoto::c_stepMoto__sub_object(ts_step_moto*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, stepmoto.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>c_stepMoto::pauseTimer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stepmoto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::pause(timer_dev*)
</UL>

<P><STRONG><a name="[2ae]"></a>c_stepMoto::pauseInterrupt()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stepmoto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::pauseInterrupt(timer_dev*, int)
</UL>

<P><STRONG><a name="[28c]"></a>c_temp::setOut(unsigned)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = c_temp::setOut(unsigned) &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalWrite(unsigned char, unsigned char)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::setPwmDuty(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M106()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::c_temp(ts_temperature*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::outManage()
</UL>

<P><STRONG><a name="[2b0]"></a>c_temp::c_temp(ts_temperature*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = c_temp::c_temp(ts_temperature*) &rArr; c_temp::setOut(unsigned) &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::getPwmPeriod(unsigned char)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::setPwmFormat(unsigned char, unsigned short, unsigned char)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setOut(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_temperature_cpp
</UL>

<P><STRONG><a name="[515]"></a>c_temp::c_temp__sub_object(ts_temperature*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, temperature.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>c_temp::pid()</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_temp::pid() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::outManage()
</UL>

<P><STRONG><a name="[2b3]"></a>c_temp::sampleTemp()</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_temp::sampleTemp() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::analogRead(unsigned char)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::outManage()
</UL>

<P><STRONG><a name="[27d]"></a>c_temp::outManage()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = c_temp::outManage() &rArr; c_temp::pid() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::sampleTemp()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setOut(unsigned)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainLoopTask()
</UL>

<P><STRONG><a name="[2b5]"></a>c_temp::pidAutoTune(float, int)</STRONG> (Thumb, 1202 bytes, Stack size 112 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = c_temp::pidAutoTune(float, int) &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, te_base)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, te_base)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::sampleTemp()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setOut(unsigned)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M303()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_autoTurn()
</UL>

<P><STRONG><a name="[2b6]"></a>c_gcode::M24()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_gcode::M24()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::setStartPrint(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2b8]"></a>c_gcode::M20()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = c_gcode::M20() &rArr; c_sdReader::ls() &rArr; ffind &rArr; fat_ffind &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::ls()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2ba]"></a>c_gcode::M303()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = c_gcode::M303() &rArr; c_temp::pidAutoTune(float, int) &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2bb]"></a>c_gcode::showTemperature()</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = c_gcode::showTemperature() &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, te_base)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, te_base)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::getTarTemperature()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::getTemperature()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::pushCommand(ts_commu_buf*)
</UL>

<P><STRONG><a name="[2bf]"></a>c_gcode::M109()</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = c_gcode::M109() &rArr; c_gcode::showTemperature() &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, te_base)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::getTarTemperature()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::getTemperature()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setTarTemp(int)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2de]"></a>c_gcode::M107()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2c2]"></a>c_gcode::M106()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = c_gcode::M106() &rArr; c_temp::setOut(unsigned) &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setOut(unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[293]"></a>c_gcode::M17()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_gcode::M17() &rArr; c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::trigger()
</UL>

<P><STRONG><a name="[27e]"></a>c_gcode::M84()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_gcode::M84() &rArr; c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalWrite(unsigned char, unsigned char)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainLoopTask()
</UL>

<P><STRONG><a name="[2c4]"></a>c_gcode::M0_M1()</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = c_gcode::M0_M1() &rArr; c_gpio::digitalRead(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalRead(unsigned char)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2c5]"></a>c_gcode::setCurrentPos(unsigned char, float)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_gcode::setCurrentPos(unsigned char, float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G92()
</UL>

<P><STRONG><a name="[2c6]"></a>c_gcode::G92()</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_gcode::G92() &rArr; c_gcode::setCurrentPos(unsigned char, float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurrentPos(unsigned char, float)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2c7]"></a>c_gcode::calculateDelta(float*, float*)</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = c_gcode::calculateDelta(float*, float*) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurPos(float, float, float, float)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
</UL>

<P><STRONG><a name="[27c]"></a>c_gcode::moveAbs(float, float, float, float, float)</STRONG> (Thumb, 668 bytes, Stack size 48 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDelta(float*, float*)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveRelative(float, float, float, float, float)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G0_G1()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainLoopTask()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_Focus()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_move()
</UL>

<P><STRONG><a name="[2c9]"></a>c_gcode::setCurPos(float, float, float, float)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = c_gcode::setCurPos(float, float, float, float) &rArr; c_gcode::calculateDelta(float*, float*) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDelta(float*, float*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::setPosSteps(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcodeTsk()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_setZzeroPos()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
</UL>

<P><STRONG><a name="[2ca]"></a>c_gcode::homeAxis(unsigned char, float, float*)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = c_gcode::homeAxis(unsigned char, float, float*) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::clearLimitF()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
</UL>

<P><STRONG><a name="[27a]"></a>c_gcode::G28()</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = c_gcode::G28() &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::homeAxis(unsigned char, float, float*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurPos(float, float, float, float)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::getMaxLimitF(bool, bool, bool)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::clearLimitF()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainLoopTask()
</UL>

<P><STRONG><a name="[2cc]"></a>c_gcode::calculateDeltaPara()</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = c_gcode::calculateDeltaPara() &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_storeEprom()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcodeTsk()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_reStoreFailsafe()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_loadEprom()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_reCalDelta()
</UL>

<P><STRONG><a name="[2cd]"></a>c_gcode::G29_Detect(float, float, float)</STRONG> (Thumb, 444 bytes, Stack size 88 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = c_gcode::G29_Detect(float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::vprintf(const char*, ...)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurPos(float, float, float, float)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::clearLimitF()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::getPosZmm()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::getRealZmm()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
</UL>

<P><STRONG><a name="[2ce]"></a>c_gcode::G29_Liner(float, float, float, float*, float*)</STRONG> (Thumb, 438 bytes, Stack size 104 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = c_gcode::G29_Liner(float, float, float, float*, float*) &rArr; c_gcode::G29_Detect(float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
</UL>

<P><STRONG><a name="[2cf]"></a>c_gcode::G29()</STRONG> (Thumb, 746 bytes, Stack size 72 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = c_gcode::G29() &rArr; c_gcode::G29_Liner(float, float, float, float*, float*) &rArr; c_gcode::G29_Detect(float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::loopGetData(unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_storeEprom()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurPos(float, float, float, float)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::clearLimitF()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::getPosZmm()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::getRealZmm()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2d1]"></a>c_gcode::G4()</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_gcode::G4() &rArr; c_stepMoto::waitFinish()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2da]"></a>c_gcode::setDest2current(float*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_gcode::setDest2current(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
</UL>

<P><STRONG><a name="[2d2]"></a>c_gcode::softLimit(float*)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_gcode::softLimit(float*) &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
</UL>

<P><STRONG><a name="[2d3]"></a>c_gcode::getCoordinates(float*)</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_gcode::getCoordinates(float*) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G0_G1()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
</UL>

<P><STRONG><a name="[2d4]"></a>c_gcode::G2_G3()</STRONG> (Thumb, 664 bytes, Stack size 80 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = c_gcode::G2_G3() &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::hypot(float, float)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCoordinates(float*)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::softLimit(float*)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setDest2current(float*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDelta(float*, float*)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2db]"></a>c_gcode::G0_G1()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = c_gcode::G0_G1() &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCoordinates(float*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2dc]"></a>c_gcode::loop()</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = c_gcode::loop() &rArr; c_gcode::G29() &rArr; c_gcode::G29_Liner(float, float, float, float*, float*) &rArr; c_gcode::G29_Detect(float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M25()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setTarTemp(int)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::getGcodeLock(ts_commu_buf*)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::getStatus()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::uinit()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G0_G1()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G4()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G92()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M0_M1()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M106()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M107()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M303()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M20()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M24()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M17()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M84()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcodeTsk()
</UL>

<P><STRONG><a name="[70]"></a>gcodeTsk()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = gcodeTsk() &rArr; c_gcode::loop() &rArr; c_gcode::G29() &rArr; c_gcode::G29_Liner(float, float, float, float*, float*) &rArr; c_gcode::G29_Detect(float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurPos(float, float, float, float)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::initMbx()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskRunEnable()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2e4]"></a>c_gcode::c_gcode()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_Gcode_cpp
</UL>

<P><STRONG><a name="[516]"></a>c_gcode::c_gcode__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gcode.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>c_gcode::moveRelative(float, float, float, float, float)</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = c_gcode::moveRelative(float, float, float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::close()
</UL>

<P><STRONG><a name="[517]"></a>c_gcode::M220()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gcode.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>c_gcode::stop()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_gcode::stop() &rArr; c_gpio::digitalWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalWrite(unsigned char, unsigned char)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M25()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::globalDisable()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_nvic::globalEnable()
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainLoopTask()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::checkAndPushCommand(ts_commu_buf*)
</UL>

<P><STRONG><a name="[2e5]"></a>c_sdReader::close()</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = c_sdReader::close() &rArr; c_gcode::moveRelative(float, float, float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveRelative(float, float, float, float, float)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_cooldown()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::uinit()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::init()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_stopPrint()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
</UL>

<P><STRONG><a name="[2e7]"></a>c_sdReader::sdPrint()</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = c_sdReader::sdPrint() &rArr; c_commu::checkAndPushCommand(ts_commu_buf*) &rArr; c_commu::pushCommand(ts_commu_buf*) &rArr; c_sdReader::write(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveRelative(float, float, float, float, float)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurPos(float, float, float, float)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::waitFinish()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCurPos(unsigned char)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::checkAndPushCommand(ts_commu_buf*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseAscii(char*, ts_commu_buf*, bool)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::close()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdReaderTask()
</UL>

<P><STRONG><a name="[6e]"></a>sdReaderTask()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = sdReaderTask() &rArr; c_sdReader::sdPrint() &rArr; c_commu::checkAndPushCommand(ts_commu_buf*) &rArr; c_commu::pushCommand(ts_commu_buf*) &rArr; c_sdReader::write(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskRunEnable()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::getMbxBuf()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[283]"></a>c_sdReader::init()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = c_sdReader::init() &rArr; c_sdReader::close() &rArr; c_gcode::moveRelative(float, float, float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_initCard()
</UL>

<P><STRONG><a name="[2df]"></a>c_sdReader::uinit()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = c_sdReader::uinit() &rArr; c_sdReader::close() &rArr; c_gcode::moveRelative(float, float, float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funinit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[2b9]"></a>c_sdReader::ls()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = c_sdReader::ls() &rArr; ffind &rArr; fat_ffind &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M20()
</UL>

<P><STRONG><a name="[2f1]"></a>c_sdReader::open(const char*, const char*)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = c_sdReader::open(const char*, const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, te_base)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::pushCommand(ts_commu_buf*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_openfile()
</UL>

<P><STRONG><a name="[2f3]"></a>c_sdReader::write(const char*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = c_sdReader::write(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::pushCommand(ts_commu_buf*)
</UL>

<P><STRONG><a name="[2f4]"></a>c_sdReader::removeFile(char*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = c_sdReader::removeFile(char*) &rArr; fdelete &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::pushCommand(ts_commu_buf*)
</UL>

<P><STRONG><a name="[2f6]"></a>c_sdReader::writeCmdEnd()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = c_sdReader::writeCmdEnd() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::pushCommand(ts_commu_buf*)
</UL>

<P><STRONG><a name="[2f7]"></a>c_sdReader::writeCmd(char*)</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = c_sdReader::writeCmd(char*) &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::pushCommand(ts_commu_buf*)
</UL>

<P><STRONG><a name="[2b7]"></a>c_sdReader::setStartPrint(bool)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdreader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M25()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M24()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_openfile()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_resumePrint()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_pausePrint()
</UL>

<P><STRONG><a name="[320]"></a>c_sdReader::getPercentDone()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sdreader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[2e1]"></a>c_sdReader::getStatus()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sdreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = c_sdReader::getStatus() &rArr; Print::println(unsigned, te_base) &rArr; Print::print(unsigned, te_base) &rArr; Print::print(unsigned long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, te_base)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, te_base)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[332]"></a>c_sdReader::checkAutoStart(bool)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdreader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_autoStartSd()
</UL>

<P><STRONG><a name="[2fb]"></a>c_lcd::update()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_lcd::update() &rArr; U8GLIB::firstPage() &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetModeLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::firstPage()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::nextPage()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setFont(const unsigned char*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setPrintPos(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTask()
</UL>

<P><STRONG><a name="[30b]"></a>c_lcd::getStatus()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTask()
</UL>

<P><STRONG><a name="[300]"></a>c_lcd::init_menu()</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = c_lcd::init_menu() &rArr; U8GLIB::drawStr(unsigned char, unsigned char, const char*) &rArr; u8g_DrawStr &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBitmap
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::getHeight()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::firstPage()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::nextPage()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setFont(const unsigned char*)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawStr(unsigned char, unsigned char, const char*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setColorIndex(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTask()
</UL>

<P><STRONG><a name="[305]"></a>c_lcd::encoderFxn(unsigned char)</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_lcd::encoderFxn(unsigned char) &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::digitalRead(unsigned char)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_exti::resume(unsigned char)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_exti::pause(unsigned char)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_exti::setMode(unsigned char, exti_trigger_mode)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderPulse1Isr
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderPulse2Isr
</UL>

<P><STRONG><a name="[309]"></a>encoderPulse2Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = encoderPulse2Isr &rArr; c_lcd::encoderFxn(unsigned char) &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::encoderFxn(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.text)
</UL>
<P><STRONG><a name="[30a]"></a>encoderPulse1Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = encoderPulse1Isr &rArr; c_lcd::encoderFxn(unsigned char) &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::encoderFxn(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>lcdTask()</STRONG> (Thumb, 466 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lcdTask() &rArr; c_lcd::init_menu() &rArr; U8GLIB::drawStr(unsigned char, unsigned char, const char*) &rArr; u8g_DrawStr &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, te_base)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::analogRead(unsigned char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskRunEnable()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_exti::begin(unsigned char, void(*)(), exti_trigger_mode)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::init_menu()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::getStatus()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::update()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::getMbxBuf()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>c_lcd::function_storeEprom()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_lcd::function_storeEprom() &rArr; c_gcode::calculateDeltaPara() &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::wirte(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>c_lcd::function_cooldown()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_lcd::function_cooldown()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setTarTemp(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[30f]"></a>c_lcd::menu_action_submenu(void(c_lcd::*)())</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_lcd::menu_action_submenu(void(c_lcd::*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu_load()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::control_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::main_menu()
</UL>

<P><STRONG><a name="[30c]"></a>c_lcd::drawmenu_generic(unsigned char, const char*, char, char)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setColorIndex(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setPrintPos(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_cardMenu()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::sys_status_menu()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatPla_menu()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatAbs_menu()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::retract_menu()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::control_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::tune_menu()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::main_menu()
</UL>

<P><STRONG><a name="[310]"></a>c_lcd::menu_action_function(void(c_lcd::*)())</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_lcd::menu_action_function(void(c_lcd::*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_cardMenu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::control_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::main_menu()
</UL>

<P><STRONG><a name="[30d]"></a>c_lcd::menu_action_back(void(c_lcd::*)())</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_lcd::menu_action_back(void(c_lcd::*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_cardMenu()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::sys_status_menu()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatPla_menu()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatAbs_menu()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::retract_menu()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::control_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::tune_menu()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::main_menu()
</UL>

<P><STRONG><a name="[a7]"></a>c_lcd::main_menu()</STRONG> (Thumb, 1746 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = c_lcd::main_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_function(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_submenu(void(c_lcd::*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[311]"></a>c_lcd::menu_action_edit_int3(const char*, int*, int, int)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_lcd::menu_action_edit_int3(const char*, int*, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatPla_menu()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatAbs_menu()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::tune_menu()
</UL>

<P><STRONG><a name="[313]"></a>c_lcd::itostr3(const int&)</STRONG> (Thumb, 246 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = c_lcd::itostr3(const int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_int3()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::sys_status_menu()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatPla_menu()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatAbs_menu()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr3(const float&)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::tune_menu()
</UL>

<P><STRONG><a name="[312]"></a>c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setPrintPos(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::sys_status_menu()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatPla_menu()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatAbs_menu()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::retract_menu()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::tune_menu()
</UL>

<P><STRONG><a name="[bd]"></a>c_lcd::tune_menu()</STRONG> (Thumb, 1248 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = c_lcd::tune_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_int3(const char*, int*, int, int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[319]"></a>c_lcd::menu_action_label_int3(const char*, int*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::sys_status_menu()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
</UL>

<P><STRONG><a name="[314]"></a>c_lcd::menu_action_edit_float32(const char*, float*, float, float)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_lcd::menu_action_edit_float32(const char*, float*, float, float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
</UL>

<P><STRONG><a name="[315]"></a>c_lcd::ftostr32(const float&)</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_lcd::ftostr32(const float&) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(long)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float32()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
</UL>

<P><STRONG><a name="[317]"></a>c_lcd::menu_action_edit_float51(const char*, float*, float, float)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_lcd::menu_action_edit_float51(const char*, float*, float, float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
</UL>

<P><STRONG><a name="[318]"></a>c_lcd::ftostr51(const float&)</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_lcd::ftostr51(const float&) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(long)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move10()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move1()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move01()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float51()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
</UL>

<P><STRONG><a name="[b6]"></a>c_lcd::printer_menu()</STRONG> (Thumb, 4166 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = c_lcd::printer_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr51(const float&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float51(const char*, float*, float, float)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr32(const float&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float32(const char*, float*, float, float)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_label_int3(const char*, int*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_int3(const char*, int*, int, int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[31a]"></a>c_lcd::menu_action_immediataly_move01(const char*, float*, float, float, void(c_lcd::*)())</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_lcd::menu_action_immediataly_move01(const char*, float*, float, float, void(c_lcd::*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
</UL>

<P><STRONG><a name="[b4]"></a>c_lcd::adjust_menu()</STRONG> (Thumb, 2718 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = c_lcd::adjust_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_immediataly_move01(const char*, float*, float, float, void(c_lcd::*)())
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr32(const float&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float32(const char*, float*, float, float)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_label_int3(const char*, int*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_int3(const char*, int*, int, int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[31b]"></a>c_lcd::ftostr3(const float&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_lcd::ftostr3(const float&) &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float3()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::retract_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[31c]"></a>c_lcd::ftostr31ns(const float&)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_lcd::ftostr31ns(const float&) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[321]"></a>c_lcd::itostr2(const unsigned char&)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = c_lcd::itostr2(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[bc]"></a>c_lcd::status_menu()</STRONG> (Thumb, 1538 bytes, Stack size 48 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = c_lcd::status_menu() &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::isHeat()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::firstPage()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawPixel(unsigned char, unsigned char)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawFrame(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::nextPage()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setFont(const unsigned char*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setColorIndex(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setPrintPos(unsigned char, unsigned char)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawBitmapP(unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr2(const unsigned char&)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr31ns(const float&)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr3(const float&)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_submenu(void(c_lcd::*)())
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCurPos(unsigned char)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::getPercentDone()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[323]"></a>c_lcd::menu_action_gcode(const char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = c_lcd::menu_action_gcode(const char*) &rArr; c_commu::checkAndPushCommand(ts_commu_buf*) &rArr; c_commu::pushCommand(ts_commu_buf*) &rArr; c_sdReader::write(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::checkAndPushCommand(ts_commu_buf*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseAscii(char*, ts_commu_buf*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
</UL>

<P><STRONG><a name="[325]"></a>c_lcd::menu_action_edit_bool(const char*, bool*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::retract_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
</UL>

<P><STRONG><a name="[324]"></a>c_lcd::drawmenu_edit_generic_P(unsigned char, const char*, char, const char*)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_lcd::drawmenu_edit_generic_P(unsigned char, const char*, char, const char*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setPrintPos(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::retract_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
</UL>

<P><STRONG><a name="[b0]"></a>c_lcd::prepare_menu()</STRONG> (Thumb, 2060 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = c_lcd::prepare_menu() &rArr; c_lcd::menu_action_gcode(const char*) &rArr; c_commu::checkAndPushCommand(ts_commu_buf*) &rArr; c_commu::pushCommand(ts_commu_buf*) &rArr; c_sdReader::write(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic_P(unsigned char, const char*, char, const char*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_bool(const char*, bool*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_gcode(const char*)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_immediataly_move01(const char*, float*, float, float, void(c_lcd::*)())
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_int3(const char*, int*, int, int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_function(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_submenu(void(c_lcd::*)())
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>c_lcd::control_menu()</STRONG> (Thumb, 1324 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = c_lcd::control_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_function(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_submenu(void(c_lcd::*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[326]"></a>c_lcd::menu_action_immediataly_move1(const char*, float*, float, float, void(c_lcd::*)())</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_lcd::menu_action_immediataly_move1(const char*, float*, float, float, void(c_lcd::*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu()
</UL>

<P><STRONG><a name="[af]"></a>c_lcd::move_menu()</STRONG> (Thumb, 1438 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = c_lcd::move_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_immediataly_move1(const char*, float*, float, float, void(c_lcd::*)())
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_immediataly_move01(const char*, float*, float, float, void(c_lcd::*)())
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>c_lcd::move_menu_load()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_lcd::move_menu_load() &rArr; c_lcd::menu_action_submenu(void(c_lcd::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_submenu(void(c_lcd::*)())
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCurPos(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[327]"></a>c_lcd::menu_action_edit_float3(const char*, float*, float, float)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_lcd::menu_action_edit_float3(const char*, float*, float, float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::retract_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
</UL>

<P><STRONG><a name="[b3]"></a>c_lcd::temperature_menu()</STRONG> (Thumb, 5204 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = c_lcd::temperature_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float3(const char*, float*, float, float)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic_P(unsigned char, const char*, char, const char*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_bool(const char*, bool*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr3(const float&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr51(const float&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float51(const char*, float*, float, float)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr32(const float&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float32(const char*, float*, float, float)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_label_int3(const char*, int*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_int3(const char*, int*, int, int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_function(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_submenu(void(c_lcd::*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[328]"></a>c_lcd::menu_action_edit_float5(const char*, float*, float, float)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = c_lcd::menu_action_edit_float5(const char*, float*, float, float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
</UL>

<P><STRONG><a name="[329]"></a>c_lcd::ftostr5(const float&)</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_lcd::ftostr5(const float&) &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float5()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
</UL>

<P><STRONG><a name="[b5]"></a>c_lcd::motion_menu()</STRONG> (Thumb, 3850 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = c_lcd::motion_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr5(const float&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float5(const char*, float*, float, float)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr32(const float&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float32(const char*, float*, float, float)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_label_int3(const char*, int*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_int3(const char*, int*, int, int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[32a]"></a>c_lcd::menu_action_edit_float52(const char*, float*, float, float)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_lcd::menu_action_edit_float52(const char*, float*, float, float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::retract_menu()
</UL>

<P><STRONG><a name="[32b]"></a>c_lcd::ftostr52(const float&)</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_lcd::ftostr52(const float&) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(long)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float52()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::retract_menu()
</UL>

<P><STRONG><a name="[b7]"></a>c_lcd::retract_menu()</STRONG> (Thumb, 1530 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = c_lcd::retract_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr52(const float&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float52(const char*, float*, float, float)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float3(const char*, float*, float, float)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic_P(unsigned char, const char*, char, const char*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_bool(const char*, bool*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr3(const float&)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>c_lcd::preheatAbs_menu()</STRONG> (Thumb, 798 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = c_lcd::preheatAbs_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_int3(const char*, int*, int, int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>c_lcd::preheatPla_menu()</STRONG> (Thumb, 772 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = c_lcd::preheatPla_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_int3(const char*, int*, int, int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[32d]"></a>c_lcd::menu_action_label_int4(const char*, int*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::sys_status_menu()
</UL>

<P><STRONG><a name="[32c]"></a>c_lcd::itostr4(const int&)</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_lcd::itostr4(const int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::sys_status_menu()
</UL>

<P><STRONG><a name="[c3]"></a>c_lcd::sys_status_menu()</STRONG> (Thumb, 1240 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = c_lcd::sys_status_menu() &rArr; c_lcd::drawmenu_generic(unsigned char, const char*, char, char) &rArr; U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_adc::analogRead(unsigned char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr4(const int&)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_label_int4(const char*, int*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_label_int3(const char*, int*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[32e]"></a>c_lcd::drawedit(const char*, char*)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::getHeight()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setFont(const unsigned char*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::setPrintPos(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move10()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move1()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move01()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float52()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float51()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float5()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float32()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float3()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_int3()
</UL>

<P><STRONG><a name="[a0]"></a>c_lcd::menu_edit_int3()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_lcd::menu_edit_int3() &rArr; c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::itostr3(const int&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>c_lcd::menu_edit_float3()</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = c_lcd::menu_edit_float3() &rArr; c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr3(const float&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>c_lcd::menu_edit_float32()</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = c_lcd::menu_edit_float32() &rArr; c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr32(const float&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>c_lcd::menu_edit_float5()</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = c_lcd::menu_edit_float5() &rArr; c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr5(const float&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>c_lcd::menu_edit_float51()</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = c_lcd::menu_edit_float51() &rArr; c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr51(const float&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>c_lcd::menu_edit_float52()</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = c_lcd::menu_edit_float52() &rArr; c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr52(const float&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>c_lcd::menu_edit_long5()</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = c_lcd::menu_edit_long5() &rArr; c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr5(const float&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[331]"></a>c_lcd::menu_action_edit_long5(const char*, unsigned*, unsigned, unsigned)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[9d]"></a>c_lcd::menu_immediataly_move01()</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = c_lcd::menu_immediataly_move01() &rArr; c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr51(const float&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>c_lcd::menu_immediataly_move1()</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = c_lcd::menu_immediataly_move1() &rArr; c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr51(const float&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>c_lcd::menu_immediataly_move10()</STRONG> (Thumb, 366 bytes, Stack size 72 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = c_lcd::menu_immediataly_move10() &rArr; c_lcd::drawedit(const char*, char*) &rArr; U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr51(const float&)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[518]"></a>c_lcd::menu_action_immediataly_move10(const char*, float*, float, float, void(c_lcd::*)())</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>c_lcd::function_move()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = c_lcd::function_move() &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>c_lcd::function_Focus()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = c_lcd::function_Focus() &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>c_lcd::function_autoStartSd()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_lcd::function_autoStartSd()
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::checkAutoStart(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>c_lcd::function_setZzeroPos()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = c_lcd::function_setZzeroPos() &rArr; c_gcode::setCurPos(float, float, float, float) &rArr; c_gcode::calculateDelta(float*, float*) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurPos(float, float, float, float)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCurPos(unsigned char)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>c_lcd::function_reCalDelta()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_lcd::function_reCalDelta() &rArr; c_gcode::calculateDeltaPara() &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>c_lcd::function_preheatAbs()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_lcd::function_preheatAbs()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setTarTemp(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>c_lcd::function_preheatPla()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_lcd::function_preheatPla()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::setTarTemp(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>c_lcd::function_loadEprom()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_lcd::function_loadEprom() &rArr; c_gcode::calculateDeltaPara() &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCopy(char*, char*, int)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>c_lcd::function_reStoreFailsafe()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_lcd::function_reStoreFailsafe() &rArr; c_gcode::calculateDeltaPara() &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCopy(char*, char*, int)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_eep::wirte(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>c_lcd::function_pausePrint()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_lcd::function_pausePrint()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::setStartPrint(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>c_lcd::function_resumePrint()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_lcd::function_resumePrint()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::setStartPrint(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>c_lcd::function_stopPrint()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = c_lcd::function_stopPrint() &rArr; c_sdReader::close() &rArr; c_gcode::moveRelative(float, float, float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>c_lcd::function_cardMenu()</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = c_lcd::function_cardMenu() &rArr; ffind &rArr; fat_ffind &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_feedBack()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_back(void(c_lcd::*)())
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_function(void(c_lcd::*)())
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>c_lcd::function_initCard()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = c_lcd::function_initCard() &rArr; c_sdReader::init() &rArr; c_sdReader::close() &rArr; c_gcode::moveRelative(float, float, float, float, float) &rArr; c_gcode::moveAbs(float, float, float, float, float) &rArr; c_stepMoto::move(float*, float) &rArr; c_stepMoto::recalculate_trapezoids() &rArr; c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float) &rArr; c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>c_lcd::function_openfile()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = c_lcd::function_openfile() &rArr; c_sdReader::open(const char*, const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::setStartPrint(bool)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::open(const char*, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>c_lcd::function_autoTurn()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = c_lcd::function_autoTurn() &rArr; c_temp::pidAutoTune(float, int) &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[333]"></a>c_lcd::ftostr31(const float&)</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>

<P><STRONG><a name="[519]"></a>c_lcd::itostr31(const int&)</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[51a]"></a>c_lcd::itostr3left(const int&)</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>c_commu::requestResend()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = c_commu::requestResend() &rArr; Print::println(int, te_base) &rArr; Print::print(int, te_base) &rArr; Print::print(long long, te_base) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, te_base)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::codeLoop()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::checkAndPushCommand(ts_commu_buf*)
</UL>

<P><STRONG><a name="[2ed]"></a>c_commu::getMbxBuf()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_commu::getMbxBuf() &rArr; _calloc_box
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTask()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdReaderTask()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::pushCommand(ts_commu_buf*)
</UL>

<P><STRONG><a name="[336]"></a>c_commu::pushCommand(ts_commu_buf*)</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = c_commu::pushCommand(ts_commu_buf*) &rArr; c_sdReader::write(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, te_base)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::getMbxBuf()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::writeCmd(char*)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::writeCmdEnd()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::removeFile(char*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::write(const char*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::open(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::checkAndPushCommand(ts_commu_buf*)
</UL>

<P><STRONG><a name="[2ec]"></a>c_commu::checkAndPushCommand(ts_commu_buf*)</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = c_commu::checkAndPushCommand(ts_commu_buf*) &rArr; c_commu::pushCommand(ts_commu_buf*) &rArr; c_sdReader::write(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, te_base)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::stop()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::pushCommand(ts_commu_buf*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::requestResend()
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::codeLoop()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_gcode(const char*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
</UL>

<P><STRONG><a name="[2eb]"></a>c_commu::parseAscii(char*, ts_commu_buf*, bool)</STRONG> (Thumb, 1012 bytes, Stack size 32 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = c_commu::parseAscii(char*, ts_commu_buf*, bool) &rArr; c_commu::parseFloatValue(char*, unsigned short*) &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseFloatValue(char*, unsigned short*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseLongValue(char*, unsigned short*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::codeLoop()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_gcode(const char*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
</UL>

<P><STRONG><a name="[339]"></a>c_commu::parseBinary(unsigned char*, ts_commu_buf*, bool)</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = c_commu::parseBinary(unsigned char*, ts_commu_buf*, bool) &rArr; Print::println(const char*) &rArr; Print::println() &rArr; Print::print(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::codeLoop()
</UL>

<P><STRONG><a name="[33b]"></a>c_commu::BinarySize(char*)</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = c_commu::BinarySize(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::codeLoop()
</UL>

<P><STRONG><a name="[33a]"></a>c_commu::codeLoop()</STRONG> (Thumb, 542 bytes, Stack size 16 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = c_commu::codeLoop() &rArr; c_commu::checkAndPushCommand(ts_commu_buf*) &rArr; c_commu::pushCommand(ts_commu_buf*) &rArr; c_sdReader::write(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::available()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::flush()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::read()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::BinarySize(char*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseBinary(unsigned char*, ts_commu_buf*, bool)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::requestResend()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::checkAndPushCommand(ts_commu_buf*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseAscii(char*, ts_commu_buf*, bool)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commuTsk()
</UL>

<P><STRONG><a name="[6f]"></a>commuTsk()</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = commuTsk() &rArr; c_commu::codeLoop() &rArr; c_commu::checkAndPushCommand(ts_commu_buf*) &rArr; c_commu::pushCommand(ts_commu_buf*) &rArr; c_sdReader::write(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskRunEnable()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_box
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::codeLoop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2dd]"></a>c_commu::getGcodeLock(ts_commu_buf*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_commu::getGcodeLock(ts_commu_buf*) &rArr; memCopy(char*, char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCopy(char*, char*, int)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
</UL>

<P><STRONG><a name="[33f]"></a>c_commu::c_commu()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_commu_cpp
</UL>

<P><STRONG><a name="[51b]"></a>c_commu::c_commu__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, commu.o(.text), UNUSED)

<P><STRONG><a name="[51c]"></a>c_commu::flushMbx()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, commu.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>os_error</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>

<P><STRONG><a name="[e1]"></a>rt_init_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[e2]"></a>rt_chk_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[e3]"></a>__user_perthread_libspace</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[e4]"></a>_mutex_initialize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[e5]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funinit
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[e6]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funinit
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[51d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[51e]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[51f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>

<P><STRONG><a name="[520]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseLongValue(char*, unsigned short*)
</UL>

<P><STRONG><a name="[521]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[2ea]"></a>fgetc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fgetc_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fgetc &rArr; _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
</UL>

<P><STRONG><a name="[2e6]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::writeCmdEnd()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::write(const char*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::open(const char*, const char*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::close()
</UL>

<P><STRONG><a name="[2e8]"></a>feof</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, feof_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = feof &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
</UL>

<P><STRONG><a name="[34c]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2f2]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::write(const char*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::open(const char*, const char*)
</UL>

<P><STRONG><a name="[395]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
</UL>

<P><STRONG><a name="[2f8]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::writeCmd(char*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[37f]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[34e]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[522]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_usb::beging(usblib_dev*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
</UL>

<P><STRONG><a name="[523]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[524]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[525]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuf
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJourn
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
</UL>

<P><STRONG><a name="[34f]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[526]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[527]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[528]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1d2]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[529]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[342]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[344]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[52a]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[52b]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[34d]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[355]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[347]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[356]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[357]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lroundf
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[343]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[35b]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[35c]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[361]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[35e]"></a>__filbuf</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[40c]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>

<P><STRONG><a name="[52c]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[52d]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[364]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[346]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[35f]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[f3]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[f6]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[367]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[354]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ee]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[52e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[52f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[36c]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ec]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[36e]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[358]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[7c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[36f]"></a>__flsbuf</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[37e]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[530]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>_ftell_internal</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[531]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setvbuf &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[360]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[369]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[365]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[368]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[f8]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[36b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[378]"></a>_scanf_really_real</STRONG> (Thumb, 672 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[370]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[37d]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[2fa]"></a>fwrite</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, fwritefast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::writeCmd(char*)
</UL>

<P><STRONG><a name="[fd]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[372]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[371]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[36d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[375]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[382]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[385]"></a>_scanf_really_hex_real</STRONG> (Thumb, 776 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[466]"></a>_scanf_really_infnan</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[386]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[532]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[388]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[389]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[384]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[377]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[383]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[376]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[38b]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[29b]"></a>c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned)</STRONG> (Thumb, 164 bytes, Stack size 104 bytes, stepmoto.o(i._ZN10c_stepMoto18intersection_stepsEjjfj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)
</UL>

<P><STRONG><a name="[1ce]"></a>U8GLIB_ST7920_128X64_RRD::U8GLIB_ST7920_128X64_RRD(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, u8glib_st7920_128x64_rrd.o(i._ZN24U8GLIB_ST7920_128X64_RRDC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = U8GLIB_ST7920_128X64_RRD::U8GLIB_ST7920_128X64_RRD(unsigned char) &rArr; u8g_Init &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetModeLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___28_U8GLIB_ST7920_128X64_RRD_cpp
</UL>

<P><STRONG><a name="[533]"></a>U8GLIB_ST7920_128X64_RRD::U8GLIB_ST7920_128X64_RRD__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, u8glib_st7920_128x64_rrd.o(i._ZN24U8GLIB_ST7920_128X64_RRDC1Eh), UNUSED)

<P><STRONG><a name="[30e]"></a>c_lcd::menu_action_feedBack()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(i._ZN5c_lcd20menu_action_feedBackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_lcd::menu_action_feedBack()
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_cardMenu()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move10()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move1()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move01()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float52()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float51()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float5()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float32()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float3()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_int3()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::sys_status_menu()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatPla_menu()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::preheatAbs_menu()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::retract_menu()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::motion_menu()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::temperature_menu()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu_load()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::control_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::printer_menu()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::tune_menu()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::main_menu()
</UL>

<P><STRONG><a name="[31d]"></a>U8GLIB::drawBitmapP(unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, lcd.o(i._ZN6U8GLIB11drawBitmapPEhhhhPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = U8GLIB::drawBitmapP(unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*) &rArr; u8g_DrawBitmapP &rArr; u8g_DrawHBitmapP &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBitmapP
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[2fe]"></a>U8GLIB::setPrintPos(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i._ZN6U8GLIB11setPrintPosEhh))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic_P(unsigned char, const char*, char, const char*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_edit_generic(unsigned char, const char*, char, char*)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::update()
</UL>

<P><STRONG><a name="[301]"></a>U8GLIB::setColorIndex(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcd.o(i._ZN6U8GLIB13setColorIndexEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = U8GLIB::setColorIndex(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::init_menu()
</UL>

<P><STRONG><a name="[c9]"></a>U8GLIB::write(const char*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, u8glib_st7920_128x64_rrd.o(i._ZN6U8GLIB5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = U8GLIB::write(const char*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> u8glib_st7920_128x64_rrd.o(.constdata__ZTV6U8GLIB)
<LI> u8glib_st7920_128x64_rrd.o(.constdata__ZTV24U8GLIB_ST7920_128X64_RRD)
</UL>
<P><STRONG><a name="[c8]"></a>U8GLIB::write(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, u8glib_st7920_128x64_rrd.o(i._ZN6U8GLIB5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = U8GLIB::write(unsigned char) &rArr; u8g_DrawGlyph &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyph
</UL>
<BR>[Address Reference Count : 2]<UL><LI> u8glib_st7920_128x64_rrd.o(.constdata__ZTV6U8GLIB)
<LI> u8glib_st7920_128x64_rrd.o(.constdata__ZTV24U8GLIB_ST7920_128X64_RRD)
</UL>
<P><STRONG><a name="[303]"></a>U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lcd.o(i._ZN6U8GLIB7drawBoxEhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBox
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawmenu_generic(unsigned char, const char*, char, char)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::init_menu()
</UL>

<P><STRONG><a name="[304]"></a>U8GLIB::drawStr(unsigned char, unsigned char, const char*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lcd.o(i._ZN6U8GLIB7drawStrEhhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = U8GLIB::drawStr(unsigned char, unsigned char, const char*) &rArr; u8g_DrawStr &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::init_menu()
</UL>

<P><STRONG><a name="[2fd]"></a>U8GLIB::setFont(const unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcd.o(i._ZN6U8GLIB7setFontEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = U8GLIB::setFont(const unsigned char*) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::init_menu()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::update()
</UL>

<P><STRONG><a name="[2ff]"></a>U8GLIB::nextPage()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i._ZN6U8GLIB8nextPageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = U8GLIB::nextPage() &rArr; u8g_NextPage &rArr; u8g_NextPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPage
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::init_menu()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::update()
</UL>

<P><STRONG><a name="[31e]"></a>U8GLIB::drawFrame(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lcd.o(i._ZN6U8GLIB9drawFrameEhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = U8GLIB::drawFrame(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawFrame &rArr; u8g_draw_vline &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[31f]"></a>U8GLIB::drawPixel(unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcd.o(i._ZN6U8GLIB9drawPixelEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = U8GLIB::drawPixel(unsigned char, unsigned char) &rArr; u8g_DrawPixel &rArr; u8g_DrawPixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[2fc]"></a>U8GLIB::firstPage()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcd.o(i._ZN6U8GLIB9firstPageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = U8GLIB::firstPage() &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetModeLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPage
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::init_menu()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::update()
</UL>

<P><STRONG><a name="[302]"></a>U8GLIB::getHeight()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(i._ZN6U8GLIB9getHeightEv))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::drawedit(const char*, char*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::init_menu()
</UL>

<P><STRONG><a name="[1f4]"></a>c_gpio::gpio_set_mode(gpio_dev*, unsigned char, gpio_pin_mode)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, m_gpio.o(i._ZN6c_gpio13gpio_set_modeEP8gpio_devh13gpio_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_gpio::gpio_set_mode(gpio_dev*, unsigned char, gpio_pin_mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::pinMode(unsigned char, WiringPinMode)
</UL>

<P><STRONG><a name="[2c0]"></a>c_temp::setTarTemp(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gcode.o(i._ZN6c_temp10setTarTempEi))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_preheatPla()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_preheatAbs()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_cooldown()
</UL>

<P><STRONG><a name="[2bd]"></a>c_temp::getTemperature()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gcode.o(i._ZN6c_temp14getTemperatureEv))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
</UL>

<P><STRONG><a name="[2be]"></a>c_temp::getTarTemperature()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gcode.o(i._ZN6c_temp17getTarTemperatureEv))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
</UL>

<P><STRONG><a name="[322]"></a>c_temp::isHeat()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd.o(i._ZN6c_temp6isHeatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_temp::isHeat()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[337]"></a>c_commu::parseLongValue(char*, unsigned short*)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, commu.o(i._ZN7c_commu14parseLongValueEPcPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = c_commu::parseLongValue(char*, unsigned short*) &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseAscii(char*, ts_commu_buf*, bool)
</UL>

<P><STRONG><a name="[338]"></a>c_commu::parseFloatValue(char*, unsigned short*)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, commu.o(i._ZN7c_commu15parseFloatValueEPcPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = c_commu::parseFloatValue(char*, unsigned short*) &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseAscii(char*, ts_commu_buf*, bool)
</UL>

<P><STRONG><a name="[2e0]"></a>c_gcode::M25()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gcode.o(i._ZN7c_gcode3M25Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_gcode::M25()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::setStartPrint(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::loop()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::stop()
</UL>

<P><STRONG><a name="[2e9]"></a>c_gcode::getCurPos(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdreader.o(i._ZN7c_gcode9getCurPosEh))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_setZzeroPos()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu_load()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
</UL>

<P><STRONG><a name="[205]"></a>c_timer::setOverflow(timer_dev*, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_timer.o(i._ZN7c_timer11setOverflowEP9timer_devt))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::init(timer_dev*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setPeriod(timer_dev*, unsigned)
</UL>

<P><STRONG><a name="[206]"></a>c_timer::setPrescaleFactor(timer_dev*, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m_timer.o(i._ZN7c_timer17setPrescaleFactorEP9timer_devj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_timer::setPrescaleFactor(timer_dev*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::setPeriod(timer_dev*, unsigned)
</UL>

<P><STRONG><a name="[2ab]"></a>c_timer::pause(timer_dev*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepmoto.o(i._ZN7c_timer5pauseEP9timer_dev))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::pauseTimer()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::c_stepMoto(ts_step_moto*)
</UL>

<P><STRONG><a name="[2c1]"></a>std::abs(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gcode.o(i._ZSt3absf))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
</UL>

<P><STRONG><a name="[316]"></a>std::abs(long)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(i._ZSt3absl))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr52(const float&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr51(const float&)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr32(const float&)
</UL>

<P><STRONG><a name="[29f]"></a>std::sqrt(float)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stepmoto.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDelta(float*, float*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::steps_acc_2_rate(unsigned, unsigned, float)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::dis_acc_2_speed(float, float, float)
</UL>

<P><STRONG><a name="[2d6]"></a>std::hypot(float, float)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gcode.o(i._ZSt5hypotff))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::hypot(float, float) &rArr; hypotf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
</UL>

<P><STRONG><a name="[2f9]"></a>std::strchr(char*, int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sdreader.o(i._ZSt6strchrPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::strchr(char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseAscii(char*, ts_commu_buf*, bool)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::writeCmd(char*)
</UL>

<P><STRONG><a name="[3be]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[2bc]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::codeLoop()
</UL>

<P><STRONG><a name="[ca]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[396]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[398]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[37c]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[39b]"></a>__mathlib_rredf2</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[39a]"></a>__mathlib_tofloat</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[387]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1d5]"></a>__sys_close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __sys_close &rArr; fat_wclose &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wclose
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[1dd]"></a>__sys_ensure</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fs_sys.o(i.__sys_ensure), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ensure
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_ensure
</UL>

<P><STRONG><a name="[1df]"></a>__sys_flen</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sys_flen &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_fsize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[1d3]"></a>__sys_open</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_find
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_fsize
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_create
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_path_valid
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1d9]"></a>__sys_read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[1db]"></a>__sys_seek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __sys_seek &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[1d7]"></a>__sys_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[335]"></a>_calloc_box</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rt_membox.o(i._calloc_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _calloc_box
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::getMbxBuf()
</UL>

<P><STRONG><a name="[33c]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commuTsk()
</UL>

<P><STRONG><a name="[37b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2d5]"></a>atan2f</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atan2f &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
</UL>

<P><STRONG><a name="[2d8]"></a>cosf</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
</UL>

<P><STRONG><a name="[437]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[43c]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[436]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[3d1]"></a>elink_alloc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fs_fat_elink.o(i.elink_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = elink_alloc &rArr; delete_list_get &rArr; elink_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init_path
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[3f5]"></a>elink_cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_fat_elink.o(i.elink_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[3dd]"></a>elink_delete</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = elink_delete &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_free
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_discon
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_discon
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
</UL>

<P><STRONG><a name="[3e4]"></a>elink_flush</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, fs_fat_elink.o(i.elink_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = elink_flush &rArr; elink_drvId
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_free
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_drvId
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[410]"></a>elink_init</STRONG> (Thumb, 186 bytes, Stack size 28 bytes, fs_fat_elink.o(i.elink_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = elink_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_cfg_drv
</UL>

<P><STRONG><a name="[3e6]"></a>elink_init_path</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_init_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = elink_init_path &rArr; elink_alloc &rArr; delete_list_get &rArr; elink_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_drvId
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
</UL>

<P><STRONG><a name="[3d4]"></a>elink_insert</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, fs_fat_elink.o(i.elink_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = elink_insert &rArr; elink_con &rArr; delete_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_step_dir
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_con
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[3d5]"></a>elink_prop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fs_fat_elink.o(i.elink_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elink_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[3e8]"></a>elink_scan</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = elink_scan &rArr; delete_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_discon
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
</UL>

<P><STRONG><a name="[3b4]"></a>elink_set</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fs_fat_elink.o(i.elink_set))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[3a7]"></a>fat_create</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_fat.o(i.fat_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = fat_create &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_root_clus
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[3a8]"></a>fat_delete</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fs_fat.o(i.fat_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = fat_delete &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_root_clus
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[3f2]"></a>fat_ffind</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_fat.o(i.fat_ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = fat_ffind &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_root_clus
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[3a6]"></a>fat_find</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fs_fat.o(i.fat_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_root_clus
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[3f7]"></a>fat_init</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fat_init &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_drv
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_flush
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv
</UL>

<P><STRONG><a name="[3fc]"></a>fat_jour_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fs_fat.o(i.fat_jour_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fat_jour_init &rArr; j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; get_fen_val &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_rep_space
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv
</UL>

<P><STRONG><a name="[400]"></a>fat_jour_prep</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, fs_fat.o(i.fat_jour_prep))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fat_jour_prep &rArr; j_find_reg &rArr; get_fen_val &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_rep_space
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_mark_rsvd
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_reg
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
</UL>

<P><STRONG><a name="[3a5]"></a>fat_path_valid</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, fs_fat.o(i.fat_path_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fat_path_valid &rArr; get_dir_name
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_ch
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[3ac]"></a>fat_read</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fs_fat.o(i.fat_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[3ae]"></a>fat_seek</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fat_seek &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[39e]"></a>fat_wclose</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, fs_fat.o(i.fat_wclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fat_wclose &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[3b0]"></a>fat_write</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_set
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[2f5]"></a>fdelete</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fs_mapi.o(i.fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = fdelete &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_find
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_lock
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::removeFile(char*)
</UL>

<P><STRONG><a name="[2f0]"></a>ffind</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, fs_mapi.o(i.ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ffind &rArr; fat_ffind &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_fsize
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strpos
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::ls()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_cardMenu()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::open(const char*, const char*)
</UL>

<P><STRONG><a name="[349]"></a>_fgetc$unlocked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[2ee]"></a>finit</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = finit &rArr; init_drv &rArr; fat_jour_init &rArr; j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; get_fen_val &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_cfg_drv
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::init()
</UL>

<P><STRONG><a name="[2d7]"></a>floorf</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
</UL>

<P><STRONG><a name="[39c]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[40d]"></a>fs_cfg_drv</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_mapi.o(i.fs_cfg_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fs_cfg_drv &rArr; elink_init
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[3ea]"></a>fs_chk_media</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_lib.o(i.fs_chk_media))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_chk_media
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[3a4]"></a>fs_dir</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_lib.o(i.fs_dir))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[3f8]"></a>fs_find_drv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fs_lib.o(i.fs_find_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_find_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
</UL>

<P><STRONG><a name="[3a2]"></a>fs_find_iob</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_lib.o(i.fs_find_iob))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_find_iob &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[412]"></a>fs_get_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_date))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
</UL>

<P><STRONG><a name="[414]"></a>fs_get_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[409]"></a>fs_lock</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, fs_lib.o(i.fs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[3a3]"></a>fs_map_drive</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, fs_lib.o(i.fs_map_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_map_drive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funinit
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[40a]"></a>fs_strpos</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_lib.o(i.fs_strpos))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[3ff]"></a>fsj_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fs_journal.o(i.fsj_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fsj_init &rArr; CheckJourn &rArr; CheckJSect
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJourn
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
</UL>

<P><STRONG><a name="[41d]"></a>fsj_set_space</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_journal.o(i.fsj_set_space))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_rep_space
</UL>

<P><STRONG><a name="[3bf]"></a>fsj_write</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, fs_journal.o(i.fsj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[2ef]"></a>funinit</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, fs_mapi.o(i.funinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = funinit &rArr; fs_map_drive
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit_drv
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::uinit()
</UL>

<P><STRONG><a name="[394]"></a>hypotf</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, hypotf.o(i.hypotf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hypotf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::hypot(float, float)
</UL>

<P><STRONG><a name="[263]"></a>isr_sem_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback_UsbVcom()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::encoderFxn(unsigned char)
</UL>

<P><STRONG><a name="[39d]"></a>ldexp</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[2a4]"></a>lroundf</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lroundf.o(i.lroundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lroundf &rArr; _ffix_r &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
</UL>

<P><STRONG><a name="[1e5]"></a>mmc_DevCtrl</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_mmc.o(i.mmc_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mmc_DevCtrl &rArr; mmc_read_cid &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_DevCtrl
</UL>

<P><STRONG><a name="[1e0]"></a>mmc_Init</STRONG> (Thumb, 530 bytes, Stack size 56 bytes, fs_mmc.o(i.mmc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mmc_Init &rArr; mmc_read_csd &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_csd
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_cid
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_Init
</UL>

<P><STRONG><a name="[1e4]"></a>mmc_ReadInfo</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fs_mmc.o(i.mmc_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mmc_ReadInfo &rArr; mmc_read_csd &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_csd
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdInfo
</UL>

<P><STRONG><a name="[1e2]"></a>mmc_ReadSector</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mmc_ReadSector &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdSect
</UL>

<P><STRONG><a name="[1e1]"></a>mmc_UnInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_mmc.o(i.mmc_UnInit))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_UnInit
</UL>

<P><STRONG><a name="[1e3]"></a>mmc_WriteSector</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mmc_WriteSector &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_WrSect
</UL>

<P><STRONG><a name="[439]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[106]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[62]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[426]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>

<P><STRONG><a name="[42a]"></a>rt_dec_dly</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[42c]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>

<P><STRONG><a name="[67]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 8]<UL><LI> main.o(.text)
<LI> stepmoto.o(.text)
<LI> m_gpio.o(.text)
<LI> gcode.o(.text)
<LI> sdreader.o(.text)
<LI> temperature.o(.text)
<LI> lcd.o(.text)
<LI> commu.o(.text)
</UL>
<P><STRONG><a name="[42e]"></a>rt_evt_psh</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[63]"></a>rt_free_box</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[428]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[431]"></a>rt_init_stack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_cm3.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[79]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR>[Address Reference Count : 1]<UL><LI> commu.o(.text)
</UL>
<P><STRONG><a name="[432]"></a>rt_mbx_psh</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[77]"></a>rt_mbx_send</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mbx_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commu.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>rt_mbx_wait</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commu.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commu.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>rt_mut_release</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gcode.o(.text)
<LI> rtx_conf_cm.o(.text)
<LI> commu.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>rt_mut_wait</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gcode.o(.text)
<LI> rtx_conf_cm.o(.text)
<LI> commu.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>rt_pop_req</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[416]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>

<P><STRONG><a name="[415]"></a>rt_psq_enq</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>

<P><STRONG><a name="[427]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[42b]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
</UL>

<P><STRONG><a name="[42d]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[433]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>

<P><STRONG><a name="[42f]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[435]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
</UL>

<P><STRONG><a name="[6a]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR>[Address Reference Count : 3]<UL><LI> stepmoto.o(.text)
<LI> m_usbserial.o(.text)
<LI> lcd.o(.text)
</UL>
<P><STRONG><a name="[434]"></a>rt_sem_psh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[6b]"></a>rt_sem_send</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> lcd.o(i._ZN5c_lcd20menu_action_feedBackEv)
</UL>
<P><STRONG><a name="[73]"></a>rt_sem_wait</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stepmoto.o(.text)
<LI> lcd.o(.text)
<LI> commu.o(.text)
</UL>
<P><STRONG><a name="[102]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[429]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[72]"></a>rt_sys_init</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>rt_systick</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_systick &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[68]"></a>rt_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_time_get))
<BR>[Address Reference Count : 7]<UL><LI> main.o(.text)
<LI> stepmoto.o(.text)
<LI> m_gpio.o(.text)
<LI> gcode.o(.text)
<LI> temperature.o(.text)
<LI> lcd.o(.text)
<LI> commu.o(.text)
</UL>
<P><STRONG><a name="[43a]"></a>rt_tmr_tick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_timer.o(i.rt_tmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tmr_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[6d]"></a>rt_tsk_create</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>rt_tsk_delete</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[340]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[2d9]"></a>sinf</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
</UL>

<P><STRONG><a name="[393]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
</UL>

<P><STRONG><a name="[392]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseFloatValue(char*, unsigned short*)
</UL>

<P><STRONG><a name="[7b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::vprintf(const char*, ...)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::parseFloatValue(char*, unsigned short*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move10()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_long5(const char*, unsigned*, unsigned, unsigned)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float5()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float5(const char*, float*, float, float)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[43f]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[225]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move10()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[442]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[445]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[449]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[224]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move10()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float5()
</UL>

<P><STRONG><a name="[447]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[297]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::steps_acc_2_rate(unsigned, unsigned, float)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::dis_acc_2_speed(float, float, float)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::rate_acc_2_Steps(unsigned, unsigned, float)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[448]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_long5(const char*, unsigned*, unsigned, unsigned)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float5(const char*, float*, float, float)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[44a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[330]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
</UL>

<P><STRONG><a name="[44b]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[22b]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[534]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[227]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[535]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[32f]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_long5(const char*, unsigned*, unsigned, unsigned)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
</UL>

<P><STRONG><a name="[536]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[222]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move10()
</UL>

<P><STRONG><a name="[44c]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[44f]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_long5(const char*, unsigned*, unsigned, unsigned)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float5(const char*, float*, float, float)
</UL>

<P><STRONG><a name="[44d]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[441]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[444]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDelta(float*, float*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move10()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[44e]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[228]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[450]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2d0]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned)
</UL>

<P><STRONG><a name="[452]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDelta(float*, float*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::showTemperature()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::steps_acc_2_rate(unsigned, unsigned, float)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::dis_acc_2_speed(float, float, float)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::rate_acc_2_Steps(unsigned, unsigned, float)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move10()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float5()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float5(const char*, float*, float, float)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
</UL>

<P><STRONG><a name="[453]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveRelative(float, float, float, float, float)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCoordinates(float*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::homeAxis(unsigned char, float, float*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDelta(float*, float*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::steps_acc_2_rate(unsigned, unsigned, float)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::dis_acc_2_speed(float, float, float)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move1()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move01()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lroundf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[455]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[457]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[45a]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[28e]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCoordinates(float*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::homeAxis(unsigned char, float, float*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::sampleTemp()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_temperature_cpp
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::getPosZmm()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::getRealZmm()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::recalculate_trapezoids()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::rate_acc_2_Steps(unsigned, unsigned, float)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move1()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move01()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float52()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float51()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float32()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float3()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[458]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[286]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCoordinates(float*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::intersection_steps(unsigned, unsigned, float, unsigned)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_reverse_pass()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_pass_kernel(ts_stepBlockRun*, ts_stepBlockRun*, ts_stepBlockRun*)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::recalculate_trapezoids()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[459]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::ftoa(float, char*, unsigned char, unsigned char)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurrentPos(unsigned char, float)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M303()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::steps_acc_2_rate(unsigned, unsigned, float)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::setPosSteps(float*)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::recalculate_trapezoids()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::rate_acc_2_Steps(unsigned, unsigned, float)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr31(const float&)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float52()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float51()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float5()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float32()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float3()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_int3()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr52(const float&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float52(const char*, float*, float, float)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr5(const float&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float3(const char*, float*, float, float)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::move_menu()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::prepare_menu()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr31ns(const float&)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr3(const float&)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::adjust_menu()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr51(const float&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float51(const char*, float*, float, float)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr32(const float&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float32(const char*, float*, float, float)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[45b]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[41e]"></a>_ffix_r</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffixr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ffix_r &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lroundf
</UL>

<P><STRONG><a name="[29a]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)
</UL>

<P><STRONG><a name="[45c]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[27b]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCoordinates(float*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M303()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::sampleTemp()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::getPosZmm()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::getRealZmm()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::recalculate_trapezoids()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G28()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainLoopTask()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::isHeat()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_autoTurn()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_Focus()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_move()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move10()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move1()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move01()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float52()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float51()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float5()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float32()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float3()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_int3()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::status_menu()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_int3(const char*, int*, int, int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::sdPrint()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_sdReader::close()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[537]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[298]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCoordinates(float*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::sampleTemp()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::steps_acc_2_rate(unsigned, unsigned, float)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::rate_acc_2_Steps(unsigned, unsigned, float)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::outManage()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[538]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[212]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::ftoa(float, char*, unsigned char, unsigned char)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::softLimit(float*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_pass_kernel(ts_stepBlockRun*, ts_stepBlockRun*, ts_stepBlockRun*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::outManage()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move1()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move01()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float52()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float51()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float5()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float32()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float3()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_int3()
</UL>

<P><STRONG><a name="[45d]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[460]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::ftoa(float, char*, unsigned char, unsigned char)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::getCoordinates(float*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDelta(float*, float*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::setCurrentPos(unsigned char, float)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::sampleTemp()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_temperature_cpp
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::steps_acc_2_rate(unsigned, unsigned, float)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::setPosSteps(float*)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::dis_acc_2_speed(float, float, float)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::recalculate_trapezoids()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::rate_acc_2_Steps(unsigned, unsigned, float)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_stepMoto_cpp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr31(const float&)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr52(const float&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float52(const char*, float*, float, float)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float3(const char*, float*, float, float)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr31ns(const float&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr51(const float&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float51(const char*, float*, float, float)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::ftostr32(const float&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_action_edit_float32(const char*, float*, float, float)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[45e]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[454]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[440]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::softLimit(float*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_pass_kernel(ts_stepBlockRun*, ts_stepBlockRun*, ts_stepBlockRun*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::calculateTrapezoid(ts_stepBlockRun*, float, float)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::outManage()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::isHeat()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move1()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_immediataly_move01()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_long5()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float52()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float51()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float5()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float32()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_float3()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::menu_edit_int3()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
</UL>

<P><STRONG><a name="[45f]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[3c6]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lroundf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[2c8]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDelta(float*, float*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lcd::function_setZzeroPos()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[461]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[43e]"></a>_fsqrt</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, fsqrt.o(x$fpl$fsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[28f]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G2_G3()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Liner(float, float, float, float*, float*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::G29_Detect(float, float, float)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDeltaPara()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::homeAxis(unsigned char, float, float*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::calculateDelta(float*, float*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::M109()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pidAutoTune(float, int)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::sampleTemp()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::pid()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::moveAbs(float, float, float, float, float)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lroundf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[463]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[226]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[464]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[446]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[397]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[399]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypotf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[35a]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[37a]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[379]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[465]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[108]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[107]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[116]"></a>DataStageOut</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[117]"></a>DataStageIn</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[118]"></a>NoData_Setup0</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[120]"></a>Data_Setup0</STRONG> (Thumb, 664 bytes, Stack size 40 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[132]"></a>u8g_font_get_byte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g_font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXDescent
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXAscent
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontDescent
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontAscent
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetLowerGDescent
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontEndEncoding
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontStartEncoding
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetCapitalAHeight
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetBBXOffY
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetBBXOffX
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetBBXHeight
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetBBXWidth
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>

<P><STRONG><a name="[13a]"></a>u8g_font_get_word</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding97Pos
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding65Pos
</UL>

<P><STRONG><a name="[131]"></a>u8g_font_GetFormat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetSize
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_CopyGlyphDataToCache
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontGlyphStructureSize
</UL>

<P><STRONG><a name="[133]"></a>u8g_font_GetFontGlyphStructureSize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_font_GetFontGlyphStructureSize &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetSize
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetGlyphDataStart
</UL>

<P><STRONG><a name="[134]"></a>u8g_font_GetBBXWidth</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontBBXWidth
</UL>

<P><STRONG><a name="[135]"></a>u8g_font_GetBBXHeight</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontBBXHeight
</UL>

<P><STRONG><a name="[136]"></a>u8g_font_GetBBXOffX</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontBBXOffX
</UL>

<P><STRONG><a name="[137]"></a>u8g_font_GetBBXOffY</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontBBXOffY
</UL>

<P><STRONG><a name="[143]"></a>u8g_font_GetGlyphDataStart</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8g_font_GetGlyphDataStart &rArr; u8g_font_GetFontGlyphStructureSize &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontGlyphStructureSize
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph270
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph90
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>

<P><STRONG><a name="[14a]"></a>u8g_CopyGlyphDataToCache</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, u8g_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_CopyGlyphDataToCache &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[14c]"></a>u8g_FillEmptyGlyphCache</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, u8g_font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[176]"></a>u8g_font_calc_str_min_box</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrAMinBox
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrMinBox
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_box_min
</UL>

<P><STRONG><a name="[178]"></a>u8g_font_get_str_box_fill_args</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, u8g_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrAMinBox
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrMinBox
</UL>

<P><STRONG><a name="[188]"></a>u8g_init_data</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, u8g_ll_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_init_data
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontPosBaseline
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitRW8Bit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Init8Bit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Init8BitFixedPort
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitI2C
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitHWSPI
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitSPI
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Init
</UL>

<P><STRONG><a name="[1ba]"></a>u8g_draw_circle_section</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, u8g_circle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_circle
</UL>

<P><STRONG><a name="[1bc]"></a>u8g_draw_disc_section</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, u8g_circle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_disc
</UL>

<P><STRONG><a name="[1c2]"></a>u8g_DrawHXBM</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, u8g_bitmap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawXBM
</UL>

<P><STRONG><a name="[1c4]"></a>u8g_DrawHXBMP</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, u8g_bitmap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawXBMP
</UL>

<P><STRONG><a name="[d2]"></a>__sti___28_U8GLIB_ST7920_128X64_RRD_cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, u8glib_st7920_128x64_rrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___28_U8GLIB_ST7920_128X64_RRD_cpp &rArr; U8GLIB_ST7920_128X64_RRD::U8GLIB_ST7920_128X64_RRD(unsigned char) &rArr; u8g_Init &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetModeLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB_ST7920_128X64_RRD::U8GLIB_ST7920_128X64_RRD(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8glib_st7920_128x64_rrd.o(.init_array)
</UL>
<P><STRONG><a name="[80]"></a>Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f103.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>UnInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, spi_stm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f103.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>Send</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_stm32f103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_sent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f103.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>SendBuf</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi_stm32f103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f103.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>RecBuf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spi_stm32f103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RecBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f103.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>BusSpeed</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, spi_stm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f103.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>SetSS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi_stm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f103.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>CheckMedia</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f103.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>mc0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mc0_Init &rArr; mmc_Init &rArr; mmc_read_csd &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>mc0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>mc0_RdSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mc0_RdSect &rArr; mmc_ReadSector &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>mc0_WrSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mc0_WrSect &rArr; mmc_WriteSector &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_WriteSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>mc0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mc0_RdInfo &rArr; mmc_ReadInfo &rArr; mmc_read_csd &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>mc0_DevCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc0_DevCtrl &rArr; mmc_DevCtrl &rArr; mmc_read_cid &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_DevCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>__sti___9_m_adc_cpp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_adc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_adc.o(.init_array)
</UL>
<P><STRONG><a name="[d4]"></a>__sti___10_m_gpio_cpp</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, m_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___10_m_gpio_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gpio::c_gpio(gpio_dev*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_gpio.o(.init_array)
</UL>
<P><STRONG><a name="[1fd]"></a>dispatch_adv_cc(timer_dev*)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dispatch_adv_cc(timer_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_tim1_cc
</UL>

<P><STRONG><a name="[1fe]"></a>dispatch_general(timer_dev*)</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dispatch_general(timer_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_tim8
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_tim4
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_tim3
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_tim2
</UL>

<P><STRONG><a name="[d5]"></a>__sti___11_m_timer_cpp</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, m_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___11_m_timer_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_timer::c_timer(timer_dev*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_timer.o(.init_array)
</UL>
<P><STRONG><a name="[d6]"></a>__sti___9_m_rcc_cpp</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, m_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___9_m_rcc_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rcc::c_rcc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_rcc.o(.init_array)
</UL>
<P><STRONG><a name="[d7]"></a>__sti___12_m_serial_cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = __sti___12_m_serial_cpp &rArr; serial::serial(usart_dev*) &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial::serial(usart_dev*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_serial.o(.init_array)
</UL>
<P><STRONG><a name="[d8]"></a>__sti___9_m_usb_cpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_usb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m_usb.o(.init_array)
</UL>
<P><STRONG><a name="[267]"></a>rb_init(ring_buffer*, unsigned short, unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_usbserial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::begin()
</UL>

<P><STRONG><a name="[25f]"></a>rb_full_count(ring_buffer*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rb_full_count(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::available()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::Handle_USBAsynchXfer()
</UL>

<P><STRONG><a name="[260]"></a>rb_safe_remove(ring_buffer*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rb_safe_remove(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::read(void*, unsigned)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::Handle_USBAsynchXfer()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::read()
</UL>

<P><STRONG><a name="[262]"></a>rb_safe_insert(ring_buffer*, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rb_safe_insert(ring_buffer*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback_UsbVcom()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::write(const void*, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::write(const char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[d9]"></a>__sti___15_m_usbSerial_cpp</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, m_usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___15_m_usbSerial_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::usbSerial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_usbserial.o(.init_array)
</UL>
<P><STRONG><a name="[265]"></a>rb_reset(ring_buffer*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_usbserial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSerial::flush()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_UsbVcom()
</UL>

<P><STRONG><a name="[276]"></a>dispatch_extis(unsigned, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dispatch_extis(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_exti15_10
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_exti9_5
</UL>

<P><STRONG><a name="[275]"></a>dispatch_single_exti(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dispatch_single_exti(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_exti4
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_exti3
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_exti2
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_exti1
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__irq_exti0
</UL>

<P><STRONG><a name="[db]"></a>__sti___12_stepMoto_cpp</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, stepmoto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = __sti___12_stepMoto_cpp &rArr; c_stepMoto::c_stepMoto(ts_step_moto*) &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::c_stepMoto(ts_step_moto*)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepmoto.o(.init_array)
</UL>
<P><STRONG><a name="[28a]"></a>rb_is_empty(ring_buffer*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stepmoto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::move(float*, float)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepIsr()
</UL>

<P><STRONG><a name="[29d]"></a>rb_get_NextIndex(ring_buffer*, unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stepmoto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::planner_forward_pass()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_stepMoto::recalculate_trapezoids()
</UL>

<P><STRONG><a name="[dc]"></a>__sti___15_temperature_cpp</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __sti___15_temperature_cpp &rArr; c_temp::c_temp(ts_temperature*) &rArr; c_temp::setOut(unsigned) &rArr; c_gpio::pinMode(unsigned char, WiringPinMode) &rArr; c_timer::setPinMode(timer_dev*, unsigned char, timer_mode) &rArr; c_timer::disableChannel(timer_dev*, int) &rArr; c_timer::detachInterrupt(timer_dev*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_temp::c_temp(ts_temperature*)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temperature.o(.init_array)
</UL>
<P><STRONG><a name="[dd]"></a>__sti___9_Gcode_cpp</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___9_Gcode_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_gcode::c_gcode()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gcode.o(.init_array)
</UL>
<P><STRONG><a name="[de]"></a>__sti___9_commu_cpp</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, commu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___9_commu_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_commu::c_commu()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commu.o(.init_array)
</UL>
<P><STRONG><a name="[40e]"></a>init_drv</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, fs_mapi.o(i.init_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = init_drv &rArr; fat_jour_init &rArr; j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; get_fen_val &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[411]"></a>uninit_drv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fs_mapi.o(i.uninit_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uninit_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funinit
</UL>

<P><STRONG><a name="[420]"></a>mmc_command</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadSector
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_Init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_block
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_info
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
</UL>

<P><STRONG><a name="[425]"></a>mmc_fill_cid</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, fs_mmc.o(i.mmc_fill_cid))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_cid
</UL>

<P><STRONG><a name="[422]"></a>mmc_read_block</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadSector
</UL>

<P><STRONG><a name="[41f]"></a>mmc_read_cid</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_read_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mmc_read_cid &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_info
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_fill_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_DevCtrl
</UL>

<P><STRONG><a name="[421]"></a>mmc_read_csd</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_read_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mmc_read_csd &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_Init
</UL>

<P><STRONG><a name="[424]"></a>mmc_read_info</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_read_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_csd
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_cid
</UL>

<P><STRONG><a name="[423]"></a>mmc_write_block</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_WriteSector
</UL>

<P><STRONG><a name="[430]"></a>rt_init_context</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[3b2]"></a>alloc_name</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = alloc_name &rArr; alloc_new_clus &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_set
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_comp
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[3b8]"></a>alloc_new_clus</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_new_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = alloc_new_clus &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[3bd]"></a>cache_fat</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_fat
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_mark_rsvd
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>

<P><STRONG><a name="[3b3]"></a>check_lfn</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fs_fat.o(i.check_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[3c1]"></a>check_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_fat.o(i.check_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[3c3]"></a>chk_dir_empty</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, fs_fat.o(i.chk_dir_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = chk_dir_empty &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[3b9]"></a>clear_clus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[3c4]"></a>clus_to_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_rep_space
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
</UL>

<P><STRONG><a name="[3c7]"></a>count_free_clus</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, fs_fat.o(i.count_free_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = count_free_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[3ca]"></a>create_entry</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, fs_fat.o(i.create_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_set
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_prop
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[3ce]"></a>create_lfn_entry</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, fs_fat.o(i.create_lfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = create_lfn_entry &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[3d0]"></a>create_sfn_entry</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, fs_fat.o(i.create_sfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = create_sfn_entry &rArr; alloc_new_clus &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[3cc]"></a>cvt_fatname</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fs_fat.o(i.cvt_fatname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cvt_fatname &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[3dc]"></a>delete_entries</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fs_fat.o(i.delete_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = delete_entries &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_set
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[3e9]"></a>fat_crc32</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.fat_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fat_crc32 &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
</UL>

<P><STRONG><a name="[3ed]"></a>fat_find_dir</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, fs_fat.o(i.fat_find_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_name
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[3cb]"></a>find_fn_elink</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fs_fat.o(i.find_fn_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = find_fn_elink &rArr; elink_scan &rArr; delete_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[3ef]"></a>find_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_fat.o(i.find_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = find_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[3b5]"></a>frec_pos_comp</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.frec_pos_comp))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[3b7]"></a>frec_pos_set</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fs_fat.o(i.frec_pos_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[3b6]"></a>frec_read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs_fat.o(i.frec_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frec_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[3bb]"></a>get_EOC</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>

<P><STRONG><a name="[418]"></a>get_RSVD</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_fat.o(i.get_RSVD))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_mark_rsvd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_chk_rsvd
</UL>

<P><STRONG><a name="[3fa]"></a>get_bootrec</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, fs_fat.o(i.get_bootrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_bootrec &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[3d8]"></a>get_date</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_fat.o(i.get_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_date
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_date
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
</UL>

<P><STRONG><a name="[3f6]"></a>get_dir_name</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fs_fat.o(i.get_dir_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_dir_name
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_path_valid
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[3ee]"></a>get_elink_dat</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fs_fat.o(i.get_elink_dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_elink_dat &rArr; frec_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[3c8]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
</UL>

<P><STRONG><a name="[413]"></a>get_fen_val</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fs_fat.o(i.get_fen_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_fen_val &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_reg
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_chk_rsvd
</UL>

<P><STRONG><a name="[3ba]"></a>get_free_clus</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, fs_fat.o(i.get_free_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_free_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>

<P><STRONG><a name="[3fb]"></a>get_fsinfo</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fs_fat.o(i.get_fsinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_fsinfo &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[3f3]"></a>get_next_info</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, fs_fat.o(i.get_next_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_next_info &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[3cf]"></a>get_nt_name</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, fs_fat.o(i.get_nt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_nt_name &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[3da]"></a>get_time</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_fat.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
</UL>

<P><STRONG><a name="[3c9]"></a>get_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_fat.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
</UL>

<P><STRONG><a name="[3f9]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_fat.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
</UL>

<P><STRONG><a name="[3ec]"></a>init_elink_path</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_fat.o(i.init_elink_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_elink_path &rArr; elink_init_path &rArr; elink_alloc &rArr; delete_list_get &rArr; elink_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_drv
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init_path
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[406]"></a>is_EOC</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.is_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
</UL>

<P><STRONG><a name="[417]"></a>j_chk_rsvd</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fs_fat.o(i.j_chk_rsvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = j_chk_rsvd &rArr; get_fen_val &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fen_val
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RSVD
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
</UL>

<P><STRONG><a name="[41a]"></a>j_clus_cnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_fat.o(i.j_clus_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_rep_space
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_reg
</UL>

<P><STRONG><a name="[401]"></a>j_find_reg</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, fs_fat.o(i.j_find_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = j_find_reg &rArr; get_fen_val &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_low_boundary
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_clus_cnt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fen_val
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
</UL>

<P><STRONG><a name="[41b]"></a>j_find_rsvd</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, fs_fat.o(i.j_find_rsvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = j_find_rsvd &rArr; j_chk_rsvd &rArr; get_fen_val &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_low_boundary
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_clus_cnt
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_chk_rsvd
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fen_val
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RSVD
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
</UL>

<P><STRONG><a name="[3fd]"></a>j_init_fats</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fs_fat.o(i.j_init_fats))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; get_fen_val &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_fat
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_mark_rsvd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_clus_cnt
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_chk_rsvd
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
</UL>

<P><STRONG><a name="[419]"></a>j_low_boundary</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.j_low_boundary))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_reg
</UL>

<P><STRONG><a name="[402]"></a>j_mark_rsvd</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fs_fat.o(i.j_mark_rsvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = j_mark_rsvd &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RSVD
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
</UL>

<P><STRONG><a name="[3fe]"></a>j_rep_space</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fs_fat.o(i.j_rep_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = j_rep_space
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_set_space
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_clus_cnt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
</UL>

<P><STRONG><a name="[3cd]"></a>lfn_calc_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_calc_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[3d2]"></a>name_hash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_hash &rArr; fat_crc32 &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[404]"></a>read_cache</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[407]"></a>read_last_entry</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_fat.o(i.read_last_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_last_entry &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[3d7]"></a>read_sector</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
</UL>

<P><STRONG><a name="[3c2]"></a>search_for_name</STRONG> (Thumb, 688 bytes, Stack size 168 bytes, fs_fat.o(i.search_for_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_set
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_prop
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_comp
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
</UL>

<P><STRONG><a name="[405]"></a>set_next_clus</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, fs_fat.o(i.set_next_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fen_val
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
</UL>

<P><STRONG><a name="[3eb]"></a>set_root_clus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fs_fat.o(i.set_root_clus))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[3d9]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
</UL>

<P><STRONG><a name="[403]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
</UL>

<P><STRONG><a name="[3d3]"></a>short_ent_hash</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, fs_fat.o(i.short_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = short_ent_hash &rArr; fat_crc32 &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[41c]"></a>switch_fat</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_fat.o(i.switch_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = switch_fat &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
</UL>

<P><STRONG><a name="[3f0]"></a>unlink_clus_chain</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, fs_fat.o(i.unlink_clus_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = unlink_clus_chain &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[3c0]"></a>val_ch</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, fs_fat.o(i.val_ch))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_path_valid
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
</UL>

<P><STRONG><a name="[3db]"></a>val_char</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_fat.o(i.val_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
</UL>

<P><STRONG><a name="[3c5]"></a>write_cache</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
</UL>

<P><STRONG><a name="[3f4]"></a>write_dot_entries</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, fs_fat.o(i.write_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_dot_entries &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[3bc]"></a>write_fat_link</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, fs_fat.o(i.write_fat_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_mark_rsvd
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>

<P><STRONG><a name="[3f1]"></a>write_fsinfo</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, fs_fat.o(i.write_fsinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[408]"></a>write_last_entry</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fs_fat.o(i.write_last_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_last_entry &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[3d6]"></a>write_sector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
</UL>

<P><STRONG><a name="[3e1]"></a>delete_list_add</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_fat_elink.o(i.delete_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delete_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_con
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
</UL>

<P><STRONG><a name="[3e2]"></a>delete_list_discon</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, fs_fat_elink.o(i.delete_list_discon))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delete_list_discon
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
</UL>

<P><STRONG><a name="[3de]"></a>delete_list_get</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fs_fat_elink.o(i.delete_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delete_list_get &rArr; elink_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_discon
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
</UL>

<P><STRONG><a name="[3e0]"></a>elink_con</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, fs_fat_elink.o(i.elink_con))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = elink_con &rArr; delete_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
</UL>

<P><STRONG><a name="[3df]"></a>elink_discon</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fs_fat_elink.o(i.elink_discon))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elink_discon
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_get
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
</UL>

<P><STRONG><a name="[3e5]"></a>elink_drvId</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_drvId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = elink_drvId
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init_path
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_flush
</UL>

<P><STRONG><a name="[3e3]"></a>elink_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fs_fat_elink.o(i.elink_free))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_flush
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
</UL>

<P><STRONG><a name="[3e7]"></a>elink_step_dir</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fs_fat_elink.o(i.elink_step_dir))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
</UL>

<P><STRONG><a name="[38c]"></a>CheckJSect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fs_journal.o(i.CheckJSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckJSect
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJourn
</UL>

<P><STRONG><a name="[38e]"></a>CheckJourn</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, fs_journal.o(i.CheckJourn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckJourn &rArr; CheckJSect
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJSect
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_init
</UL>

<P><STRONG><a name="[390]"></a>SetBuf</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_journal.o(i.SetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>

<P><STRONG><a name="[38d]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_journal.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJSect
</UL>

<P><STRONG><a name="[391]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_journal.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuf
</UL>

<P><STRONG><a name="[34a]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[451]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[443]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[462]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[456]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[352]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[359]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[374]"></a>_fp_value</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
